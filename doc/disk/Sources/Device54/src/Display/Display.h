#pragma once
#include "Display/DisplayTypes.h"
#include "Settings/SettingsTypes.h"
#include "Tables.h"
#include "Display/Painter.h"



#define DISPLAY_ADD_STRING(x)       Display::AddStringToIndicating(x)
#define DISPLAY_SHOW_WARNING(warn)  Display::ShowWarning(warn)



/// Cообщения, выводимые на экран
typedef enum
{
    LimitChan1_Volts,               ///< Предел масштаба по напряжениию первого канала.
    LimitChan2_Volts,               ///< Предел масштаба по напряжению второго канала.
    LimitSweep_Time,                ///< Предел масштаба по времени.
    EnabledPeakDet,                 ///< Включён пиковый детектор.
    LimitChan1_RShift,              ///< Предел смещения по напряжению первого канала.
    LimitChan2_RShift,              ///< Предел смещения по напряжению второго канала.
    LimitSweep_Level,               ///< Предел уровня синхронизации.
    LimitSweep_TShift,              ///< Предел смещения по времени.
    TooSmallSweepForPeakDet,        ///< Слишком быстрая развёртка для пикового детектора.
    TooFastScanForRecorder,         ///< Слишком быстрая развёртка для поточечного вывода.
    FileIsSaved,                    ///< Файл сохранён на флешку.
    SignalIsSaved,                  ///< Сигнал сохранён в ППЗ.
    SignalIsDeleted,                ///< Из ППЗУ удалён сигнал.
    MenuDebugEnabled,               ///< Включено меню ОТЛАДКА.
    TimeNotSet,                     ///< Время не установлено.
    SignalNotFound,                 ///< Сигнал не найден (автопоиск).
    SetTPosToLeft,                  ///< Рекомендация.
    NeedRebootDevice,               ///< Требуется перезагрузка.
    ImpossibleEnableMathFunction,   ///< Невозможно включить математическую функцию.
    ImpossibleEnableFFT,            ///< Невозможно включить вычисление БПФ.
    WrongFileSystem,                ///< Невозможно подключить флешку.
    WrongModePeackDet,              ///< Невозможно включить пиковый детектор.
    DisableChannelB,                ///< Требуется выключить канал 2.
    TooLongMemory,                  ///< Сообщение о невозможности включения режима 32к.
    NoPeakDet32k,                   ///< Пиковый детектор не работает при длине памяти 32к.
    NoPeakDet16k,                   ///< Пиковый детектор не работает при длине памяти 16к.
    Warn50Ohms,                     ///< Предупреждение об ограничение входного уровня на 50 Омах.
    WarnNeedForFlashDrive,          ///< Требуется подключенная флешка.
    FirmwareSaved,                  ///< Прошивка сохранена на флешку.
    FullyCompletedOTP,              ///< 
    Warning_Count
} Warning;




/** @defgroup Display
 *  @brief Работа с дисплеем
 *  @details При поточечном режиме вывода текущие точки берутся из DS_GetData(0), а последний полный сигнал из DS_GetData(1).
 *  @{
 */


class Display
{
public:
    /// Инициализация
    static void Init();
    /// Эту функцию нужно вызывать каждый кадр - отрисовка
    static void Update();
    /// Эту функцию нужно вызывать при вращении ручки смещения по вертикали для временной отрисовки вспомогательных маркеров
    static void RotateRShift(Channel ch);
    /// Эту функцию нужно вызывать при вращении ручки уровня синхронизации для временной отрисовки вспомогательных маркеров
    static void RotateTrigLev();

    static void EnableTrigLabel(bool enable);

    static void SetAddDrawFunction(pFuncVV func);

    static pFuncVV GetAddDrawFunction();

    static void RemoveAddDrawFunction();

    static void Clear();

    static void ShiftScreen(int delta);

    static void ChangedRShiftMarkers(bool active);

    static void AddStringToIndicating(const char *string);

    static void OneStringUp();

    static void OneStringDown();

    static void SetPauseForConsole(bool pause);

    static void SetOrientation(DisplayOrientation orientation);
    /// Вывести сообщения отладочной консоли
    static void DrawConsole();
    /// @brief Установить функцию и режим отрисовки экрана.
    /// @details Возможны три варианта.
    /// 1. DrawMode_Hand - в этом случае будет вызываться функция func(), определяемая пользователем, с частотой 25 раз в секунду.
    /// Используется в случаях, когда не выполняется главный цикл.
    /// 2. DrawMode_Auto и func == 0 - в этом случае будет выполняться функция Update() в главном цикле.
    /// 3. DrawMode_Auto и func != 0 - в этом случае будет выполняться функция func(), определяемая пользователем, но в теле
    /// главного цикла, будучи вызываемой из Update() вместо Update().
    static void SetDrawMode(DrawMode mode, pFuncVV func);

    static void ClearFromWarnings();

    static void ShowWarning(Warning warning);

    // Группа функций для вывода сообщения о занятом приборе
    static void FuncOnWaitStart(const char *text, bool eraseBackground);

    static void FuncOnWaitStop();

private:
    /// Нарисовать сетку
    static void DrawGrid();
    /// Нарисовать сетку для сигнала
    static void DrawGridSignal(int left, int top, int width, int height);
    /// Нарисовать сетку для спектра
    static void DrawGridSpectrum();
    /// Нарисовать сетку тип 1
    static void DrawGridType1(int left, int top, int right, int bottom, float centerX, float centerY, float deltaX, float deltaY, float stepX, 
                              float stepY);
    /// Нарисовать сетку тип 2
    static void DrawGridType2(int left, int top, int right, int bottom, int deltaX, int deltaY, int stepX, int stepY);
    /// Нарисовать сетку тип 3
    static void DrawGridType3(int left, int top, int right, int bottom, int centerX, int centerY, int deltaX, int deltaY, int stepX);
    /// Возвращает расстояние между 
    static int  DeltaHforLineGrid();

    static int  DeltaVforLineGrid();
    /// Вывести значения автоматических измерений
    static void DrawMeasures();
};


/** @}
 */
