CCS PCH C Compiler, Version 5.112, 5967               14-окт-24 12:24

               Filename:   D:\Projects\S8-54\sources\Panel\mn_sever_rf.lst

               ROM used:   2044 bytes (4%)
                           Largest free fragment is 47104
               RAM used:   99 (2%) at main() level
                           114 (3%) worst case
               Stack used: 5 locations (3 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   069E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   0156
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... //Опрос состояния кнопок и ручек.
.................... //Состояние кнопок и ручек передается по SPI(ведущий режим) и считывается состояние светодиодов каждые 10мс 
.................... //Исходный Sever-S (поменялись все входы кнопок и ручек, добавились 8 шт.)
.................... 
.................... #include <18F2515.h>
.................... //////////// Standard Header file for the PIC18F2515 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F2515
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA 3E,3D
00C0:  DATA 3B,37
00C2:  DATA 2F,1F
00C4:  CLRF   FF7
00C6:  ADDLW  D4
00C8:  MOVWF  FF6
00CA:  MOVLW  00
00CC:  ADDWFC FF7,F
00CE:  TBLRD*+
00D0:  MOVF   FF5,W
00D2:  RETURN 0
00D4:  DATA C9,C9
00D6:  DATA C9,59
00D8:  DATA 7F,49
00DA:  CLRF   FF7
00DC:  ADDLW  EA
00DE:  MOVWF  FF6
00E0:  MOVLW  00
00E2:  ADDWFC FF7,F
00E4:  TBLRD*+
00E6:  MOVF   FF5,W
00E8:  RETURN 0
00EA:  DATA 5E,05
00EC:  DATA 8E,05
00EE:  DATA BE,05
00F0:  DATA EE,05
00F2:  DATA 22,06
00F4:  DATA 42,06
00F6:  MOVFF  FEC,FFA
00FA:  MOVF   FED,F
00FC:  MOVFF  FEF,FE8
0100:  MOVWF  FF9
0102:  RETURN 0
0104:  MOVF   6E,W
0106:  ANDLW  07
0108:  MOVWF  00
010A:  RRCF   6E,W
010C:  MOVWF  01
010E:  RRCF   01,F
0110:  RRCF   01,F
0112:  MOVLW  1F
0114:  ANDWF  01,F
0116:  MOVF   01,W
0118:  ADDWF  70,W
011A:  MOVWF  FE9
011C:  MOVLW  00
011E:  ADDWFC 71,W
0120:  MOVWF  FEA
0122:  CLRF   01
0124:  INCF   01,F
0126:  INCF   00,F
0128:  BRA    012C
012A:  RLCF   01,F
012C:  DECFSZ 00,F
012E:  BRA    012A
0130:  MOVF   6F,F
0132:  BZ    013A
0134:  MOVF   01,W
0136:  IORWF  FEF,F
0138:  BRA    0140
013A:  COMF   01,F
013C:  MOVF   01,W
013E:  ANDWF  FEF,F
0140:  RETURN 0
.................... 
.................... #list
.................... 
.................... #include <P18F2515.INC>
....................  //       LIST
.................... 
.................... 
....................  //       NOLIST
.................... 
.................... 
....................  //       IFNDEF __18F2515
....................  //          MESSG "Processor-header file mismatch.  Verify selected processor."
....................  //       ENDIF
.................... 
.................... /*;==========================================================================
.................... ;       18xxxx Family        EQUates
.................... ;==========================================================================*/
.................... #define FSR0            = 0
.................... #define FSR1            = 1
.................... #define FSR2            = 2
.................... 
.................... #define FAST            = 1
.................... 
.................... #define W               = 0
.................... #define A               = 0
.................... #define ACCESS          = 0
.................... #define BANKED          = 1
.................... //;==========================================================================
.................... 
.................... //;==========================================================================
.................... //;       16Cxxx/17Cxxx Substitutions
.................... //;==========================================================================
....................   #define DDRA  TRISA      ; PIC17Cxxx SFR substitution
....................   #define DDRB  TRISB      ; PIC17Cxxx SFR substitution
....................   #define DDRC  TRISC      ; PIC17Cxxx SFR substitution
....................   #define DDRD  TRISD      ; PIC17Cxxx SFR substitution
....................   #define DDRE  TRISE      ; PIC17Cxxx SFR substitution
.................... 
.................... //;==========================================================================
.................... //;
.................... //;       Register Definitions
.................... //;
.................... //;==========================================================================
.................... 
.................... //;----- Register Files -----------------------------------------------------
.................... #byte PORTA            =  0x0F80
.................... #byte PORTB            =  0x0F81
.................... #byte PORTC            =  0x0F82
.................... #byte PORTE            =  0x0F84
.................... #byte LATA             =  0x0F89
.................... #byte LATB             =  0x0F8A
.................... #byte LATC             =  0x0F8B
.................... //#byte DDRA             =  0x0F92
.................... #byte TRISA            =  0x0F92
.................... //#byte DDRB             =  0x0F93
.................... #byte TRISB            =  0x0F93
.................... //#byte DDRC             =  0x0F94
.................... #byte TRISC            =  0x0F94
.................... #byte OSCTUNE          =  0x0F9B
.................... #byte PIE1             =  0x0F9D
.................... #byte PIR1             =  0x0F9E
.................... #byte IPR1             =  0x0F9F
.................... #byte PIE2             =  0x0FA0
.................... #byte PIR2             =  0x0FA1
.................... #byte IPR2             =  0x0FA2
.................... #byte RCSTA            =  0x0FAB
.................... #byte TXSTA            =  0x0FAC
.................... #byte TXREG            =  0x0FAD
.................... #byte RCREG            =  0x0FAE
.................... #byte SPBRG            =  0x0FAF
.................... #byte SPBRGH           =  0x0FB0
.................... #byte T3CON            =  0x0FB1
.................... #byte TMR3L            =  0x0FB2
.................... #byte TMR3H            =  0x0FB3
.................... #byte CMCON            =  0x0FB4
.................... #byte CVRCON           =  0x0FB5
.................... #byte PWM1CON          =  0x0FB7
.................... #byte BAUDCON          =  0x0FB8
.................... #byte BAUDCTL          =  0x0FB8
.................... #byte CCP2CON          =  0x0FBA
.................... #byte CCPR2            =  0x0FBB
.................... #byte CCPR2L           =  0x0FBB
.................... #byte CCPR2H           =  0x0FBC
.................... #byte CCP1CON          =  0x0FBD
.................... #byte CCPR1            =  0x0FBE
.................... #byte CCPR1L           =  0x0FBE
.................... #byte CCPR1H           =  0x0FBF
.................... #byte ADCON2           =  0x0FC0
.................... #byte ADCON1           =  0x0FC1
.................... #byte ADCON0           =  0x0FC2
.................... #byte ADRES            =  0x0FC3
.................... #byte ADRESL           =  0x0FC3
.................... #byte ADRESH           =  0x0FC4
.................... #byte SSPCON2          =  0x0FC5
.................... #byte SSPCON1          =  0x0FC6
.................... #byte SSPSTAT          =  0x0FC7
.................... #byte SSPADD           =  0x0FC8
.................... #byte SSPBUF           =  0x0FC9
.................... #byte T2CON            =  0x0FCA
.................... #byte PR2              =  0x0FCB
.................... #byte TMR2             =  0x0FCC
.................... #byte T1CON            =  0x0FCD
.................... #byte TMR1L            =  0x0FCE
.................... #byte TMR1H            =  0x0FCF
.................... #byte RCON             =  0x0FD0
.................... #byte WDTCON           =  0x0FD1
.................... #byte HLVDCON          =  0x0FD2
.................... #byte LVDCON           =  0x0FD2
.................... #byte OSCCON           =  0x0FD3
.................... #byte T0CON            =  0x0FD5
.................... #byte TMR0L            =  0x0FD6
.................... #byte TMR0H            =  0x0FD7
.................... #byte STATUS           =  0x0FD8
.................... #byte FSR2L            =  0x0FD9
.................... #byte FSR2H            =  0x0FDA
.................... #byte PLUSW2           =  0x0FDB
.................... #byte PREINC2          =  0x0FDC
.................... #byte POSTDEC2         =  0x0FDD
.................... #byte POSTINC2         =  0x0FDE
.................... #byte INDF2            =  0x0FDF
.................... #byte BSR              =  0x0FE0
.................... #byte FSR1L            =  0x0FE1
.................... #byte FSR1H            =  0x0FE2
.................... #byte PLUSW1           =  0x0FE3
.................... #byte PREINC1          =  0x0FE4
.................... #byte POSTDEC1         =  0x0FE5
.................... #byte POSTINC1         =  0x0FE6
.................... #byte INDF1            =  0x0FE7
.................... #byte WREG             =  0x0FE8
.................... #byte FSR0L            =  0x0FE9
.................... #byte FSR0H            =  0x0FEA
.................... #byte PLUSW0           =  0x0FEB
.................... #byte PREINC0          =  0x0FEC
.................... #byte POSTDEC0         =  0x0FED
.................... #byte POSTINC0         =  0x0FEE
.................... #byte INDF0            =  0x0FEF
.................... #byte INTCON3          =  0x0FF0
.................... #byte INTCON2          =  0x0FF1
.................... #byte INTCON           =  0x0FF2
.................... #byte PROD             =  0x0FF3
.................... #byte PRODL            =  0x0FF3
.................... #byte PRODH            =  0x0FF4
.................... #byte TABLAT           =  0x0FF5
.................... #byte TBLPTR           =  0x0FF6
.................... #byte TBLPTRL          =  0x0FF6
.................... #byte TBLPTRH          =  0x0FF7
.................... #byte TBLPTRU          =  0x0FF8
.................... #byte PC               =  0x0FF9
.................... #byte PCL              =  0x0FF9
.................... #byte PCLATH           =  0x0FFA
.................... #byte PCLATU           =  0x0FFB
.................... #byte STKPTR           =  0x0FFC
.................... #byte TOS              =  0x0FFD
.................... #byte TOSL             =  0x0FFD
.................... #byte TOSH             =  0x0FFE
.................... #byte TOSU             =  0x0FFF
.................... /*
.................... //;----- PORTA Bits -----------------------------------------------------
.................... #define RA0              =  0x0000
.................... #define RA1              =  0x0001
.................... #define RA2              =  0x0002
.................... #define RA3              =  0x0003
.................... #define RA4              =  0x0004
.................... #define RA5              =  0x0005
.................... #define RA6              =  0x0006
.................... #define RA7              =  0x0007
.................... 
.................... #define T0CKI            =  0x0004
.................... #define AN4              =  0x0005
.................... 
.................... #define SS               =  0x0005
.................... 
.................... #define NOT_SS           =  0x0005
.................... 
.................... #define LVDIN            =  0x0005
.................... 
.................... #define HLVDIN           =  0x0005
.................... 
.................... 
.................... //;----- PORTB Bits -----------------------------------------------------
.................... #define RB0              =  0x0000
.................... #define RB1              =  0x0001
.................... #define RB2              =  0x0002
.................... #define RB3              =  0x0003
.................... #define RB4              =  0x0004
.................... #define RB5              =  0x0005
.................... #define RB6              =  0x0006
.................... #define RB7              =  0x0007
.................... 
.................... #define INT0             =  0x0000
.................... #define INT1             =  0x0001
.................... #define INT2             =  0x0002
.................... #define CCP2_PORTB       =  0x0003
.................... #define KBI0             =  0x0004
.................... #define KBI1             =  0x0005
.................... #define KBI2             =  0x0006
.................... #define KBI3             =  0x0007
.................... 
.................... #define AN12             =  0x0000
.................... #define AN10             =  0x0001
.................... #define AN8              =  0x0002
.................... #define AN9              =  0x0003
.................... #define AN11             =  0x0004
.................... #define PGM              =  0x0005
.................... #define PGC              =  0x0006
.................... #define PGD              =  0x0007
.................... 
.................... #define DAD5             =  0x0005
.................... #define DAD6             =  0x0006
.................... #define DAD7             =  0x0007
.................... 
.................... 
.................... //;----- PORTC Bits -----------------------------------------------------
.................... #define RC0              =  0x0000
.................... #define RC1              =  0x0001
.................... #define RC2              =  0x0002
.................... #define RC3              =  0x0003
.................... #define RC4              =  0x0004
.................... #define RC5              =  0x0005
.................... #define RC6              =  0x0006
.................... #define RC7              =  0x0007
.................... 
.................... #define T1OSO            =  0x0000
.................... #define T1OSI            =  0x0001
.................... #define CCP1             =  0x0002
.................... #define SCK              =  0x0003
.................... #define SDI              =  0x0004
.................... #define SDO              =  0x0005
.................... #define TX               =  0x0006
.................... #define RX               =  0x0007
.................... 
.................... #define T13CKI           =  0x0000
.................... #define CCP2_PORTC       =  0x0001
.................... #define SCL              =  0x0003
.................... #define SDA              =  0x0004
.................... #define CK               =  0x0006
.................... //; DT is a reserved word
.................... //; DT               EQU  H'0007'
.................... 
.................... 
.................... //;----- PORTE Bits -----------------------------------------------------
.................... #define RE3              =  0x0003
.................... 
.................... 
.................... //;----- LATA Bits -----------------------------------------------------
.................... #define LATA0            =  0x0000
.................... #define LATA1            =  0x0001
.................... #define LATA2            =  0x0002
.................... #define LATA3            =  0x0003
.................... #define LATA4            =  0x0004
.................... #define LATA5            =  0x0005
.................... #define LATA6            =  0x0006
.................... #define LATA7            =  0x0007
.................... 
.................... 
.................... //;----- LATB Bits -----------------------------------------------------
.................... #define LATB0            =  0x0000
.................... #define LATB1            =  0x0001
.................... #define LATB2            =  0x0002
.................... #define LATB3            =  0x0003
.................... #define LATB4            =  0x0004
.................... #define LATB5            =  0x0005
.................... #define LATB6            =  0x0006
.................... #define LATB7            =  0x0007
.................... 
.................... 
.................... //;----- LATC Bits -----------------------------------------------------
.................... #define LATC0            =  0x0000
.................... #define LATC1            =  0x0001
.................... #define LATC2            =  0x0002
.................... #define LATC3            =  0x0003
.................... #define LATC4            =  0x0004
.................... #define LATC5            =  0x0005
.................... #define LATC6            =  0x0006
.................... #define LATC7            =  0x0007
.................... 
.................... 
.................... //;----- DDRA Bits -----------------------------------------------------
.................... #define RA0              =  0x0000
.................... #define RA1              =  0x0001
.................... #define RA2              =  0x0002
.................... #define RA3              =  0x0003
.................... #define RA4              =  0x0004
.................... #define RA5              =  0x0005
.................... #define RA6              =  0x0006
.................... #define RA7              =  0x0007
.................... 
.................... 
.................... //;----- TRISA Bits -----------------------------------------------------
.................... #define TRISA0           =  0x0000
.................... #define TRISA1           =  0x0001
.................... #define TRISA2           =  0x0002
.................... #define TRISA3           =  0x0003
.................... #define TRISA4           =  0x0004
.................... #define TRISA5           =  0x0005
.................... #define TRISA6           =  0x0006
.................... #define TRISA7           =  0x0007
.................... 
.................... 
.................... //;----- DDRB Bits -----------------------------------------------------
.................... #define RB0              =  0x0000
.................... #define RB1              =  0x0001
.................... #define RB2              =  0x0002
.................... #define RB3              =  0x0003
.................... #define RB4              =  0x0004
.................... #define RB5              =  0x0005
.................... #define RB6              =  0x0006
.................... #define RB7              =  0x0007
.................... 
.................... 
.................... //;----- TRISB Bits -----------------------------------------------------
.................... #define TRISB0           =  0x0000
.................... #define TRISB1           =  0x0001
.................... #define TRISB2           =  0x0002
.................... #define TRISB3           =  0x0003
.................... #define TRISB4           =  0x0004
.................... #define TRISB5           =  0x0005
.................... #define TRISB6           =  0x0006
.................... #define TRISB7           =  0x0007
.................... 
.................... 
.................... //;----- DDRC Bits -----------------------------------------------------
.................... #define RC0              =  0x0000
.................... #define RC1              =  0x0001
.................... #define RC2              =  0x0002
.................... #define RC3              =  0x0003
.................... #define RC4              =  0x0004
.................... #define RC5              =  0x0005
.................... #define RC6              =  0x0006
.................... #define RC7              =  0x0007
.................... 
.................... 
.................... //;----- TRISC Bits -----------------------------------------------------
.................... #define TRISC0           =  0x0000
.................... #define TRISC1           =  0x0001
.................... #define TRISC2           =  0x0002
.................... #define TRISC3           =  0x0003
.................... #define TRISC4           =  0x0004
.................... #define TRISC5           =  0x0005
.................... #define TRISC6           =  0x0006
.................... #define TRISC7           =  0x0007
.................... 
.................... 
.................... //;----- OSCTUNE Bits -----------------------------------------------------
.................... #define TUN0             =  0x0000
.................... #define TUN1             =  0x0001
.................... #define TUN2             =  0x0002
.................... #define TUN3             =  0x0003
.................... #define TUN4             =  0x0004
.................... #define PLLEN            =  0x0006
.................... #define INTSRC           =  0x0007
.................... 
.................... 
.................... //;----- PIE1 Bits -----------------------------------------------------
.................... #define TMR1IE           =  0x0000
.................... #define TMR2IE           =  0x0001
.................... #define CCP1IE           =  0x0002
.................... #define SSPIE            =  0x0003
.................... #define TXIE             =  0x0004
.................... #define RCIE             =  0x0005
.................... #define ADIE             =  0x0006
.................... 
.................... 
.................... //;----- PIR1 Bits -----------------------------------------------------
.................... #define TMR1IF           =  0x0000
.................... #define TMR2IF           =  0x0001
.................... #define CCP1IF           =  0x0002
.................... #define SSPIF            =  0x0003
.................... #define TXIF             =  0x0004
.................... #define RCIF             =  0x0005
.................... #define ADIF             =  0x0006
.................... 
.................... 
.................... //;----- IPR1 Bits -----------------------------------------------------
.................... #define TMR1IP           =  0x0000
.................... #define TMR2IP           =  0x0001
.................... #define CCP1IP           =  0x0002
.................... #define SSPIP            =  0x0003
.................... #define TXIP             =  0x0004
.................... #define RCIP             =  0x0005
.................... #define ADIP             =  0x0006
.................... 
.................... 
.................... //;----- PIE2 Bits -----------------------------------------------------
.................... #define CCP2IE           =  0x0000
.................... #define TMR3IE           =  0x0001
.................... #define LVDIE            =  0x0002
.................... #define BCLIE            =  0x0003
.................... #define CMIE             =  0x0006
.................... #define OSCFIE           =  0x0007
.................... 
.................... #define HLVDIE           =  0x0002
.................... 
.................... 
.................... //;----- PIR2 Bits -----------------------------------------------------
.................... #define CCP2IF           =  0x0000
.................... #define TMR3IF           =  0x0001
.................... #define LVDIF            =  0x0002
.................... #define BCLIF            =  0x0003
.................... #define CMIF             =  0x0006
.................... #define OSCFIF           =  0x0007
.................... 
.................... #define HLVDIF           =  0x0002
.................... 
.................... 
.................... //;----- IPR2 Bits -----------------------------------------------------
.................... #define CCP2IP           =  0x0000
.................... #define TMR3IP           =  0x0001
.................... #define LVDIP            =  0x0002
.................... #define BCLIP            =  0x0003
.................... #define CMIP             =  0x0006
.................... #define OSCFIP           =  0x0007
.................... 
.................... #define HLVDIP           =  0x0002
.................... 
.................... 
.................... //;----- RCSTA Bits -----------------------------------------------------
.................... #define RX9D             =  0x0000
.................... #define OERR             =  0x0001
.................... #define FERR             =  0x0002
.................... #define ADEN             =  0x0003
.................... #define CREN             =  0x0004
.................... #define SREN             =  0x0005
.................... #define RX9              =  0x0006
.................... #define SPEN             =  0x0007
.................... 
.................... #define ADDEN            =  0x0003
.................... 
.................... 
.................... //;----- TXSTA Bits -----------------------------------------------------
.................... #define TX9D             =  0x0000
.................... #define TRMT             =  0x0001
.................... #define BRGH             =  0x0002
.................... #define SENDB            =  0x0003
.................... #define SYNC             =  0x0004
.................... #define TXEN             =  0x0005
.................... #define TX9              =  0x0006
.................... #define CSRC             =  0x0007
.................... 
.................... 
.................... //;----- T3CON Bits -----------------------------------------------------
.................... #define TMR3ON           =  0x0000
.................... #define TMR3CS           =  0x0001
.................... #define T3SYNC           =  0x0002
.................... #define T3CCP1           =  0x0003
.................... #define T3CKPS0          =  0x0004
.................... #define T3CKPS1          =  0x0005
.................... #define T3CCP2           =  0x0006
.................... #define RD16             =  0x0007
.................... 
.................... #define NOT_T3SYNC       =  0x0002
.................... 
.................... //;----- CMCON Bits -----------------------------------------------------
.................... #define CM0              =  0x0000
.................... #define CM1              =  0x0001
.................... #define CM2              =  0x0002
.................... #define CIS              =  0x0003
.................... #define C1INV            =  0x0004
.................... #define C2INV            =  0x0005
.................... #define C1OUT            =  0x0006
.................... #define C2OUT            =  0x0007
.................... 
.................... 
.................... //;----- CVRCON Bits -----------------------------------------------------
.................... #define CVR0             =  0x0000
.................... #define CVR1             =  0x0001
.................... #define CVR2             =  0x0002
.................... #define CVR3             =  0x0003
.................... #define CVRSS            =  0x0004
.................... #define CVRR             =  0x0005
.................... #define CVROE            =  0x0006
.................... #define CVREN            =  0x0007
.................... 
.................... 
.................... //;----- PWM1CON Bits -----------------------------------------------------
.................... #define PRSEN            =  0x0007
.................... 
.................... 
.................... //;----- BAUDCON Bits -----------------------------------------------------
.................... #define ABDEN            =  0x0000
.................... #define WUE              =  0x0001
.................... #define BRG16            =  0x0003
.................... #define SCKP             =  0x0004
.................... #define RCIDL            =  0x0006
.................... #define ABDOVF           =  0x0007
.................... 
.................... #define TXCKP            =  0x0004
.................... #define RXDTP            =  0x0005
.................... #define RCMT             =  0x0006
.................... 
.................... 
.................... //;----- BAUDCTL Bits -----------------------------------------------------
.................... #define ABDEN            =  0x0000
.................... #define WUE              =  0x0001
.................... #define BRG16            =  0x0003
.................... #define SCKP             =  0x0004
.................... #define RCIDL            =  0x0006
.................... #define ABDOVF           =  0x0007
.................... 
.................... #define TXCKP            =  0x0004
.................... #define RXDTP            =  0x0005
.................... #define RCMT             =  0x0006
.................... 
.................... 
.................... //;----- CCP2CON Bits -----------------------------------------------------
.................... #define CCP2M0           =  0x0000
.................... #define CCP2M1           =  0x0001
.................... #define CCP2M2           =  0x0002
.................... #define CCP2M3           =  0x0003
.................... #define CCP2Y            =  0x0004
.................... #define CCP2X            =  0x0005
.................... 
.................... #define DC2B0            =  0x0004
.................... #define DC2B1            =  0x0005
.................... 
.................... 
.................... //;----- CCP1CON Bits -----------------------------------------------------
.................... #define CCP1M0           =  0x0000
.................... #define CCP1M1           =  0x0001
.................... #define CCP1M2           =  0x0002
.................... #define CCP1M3           =  0x0003
.................... #define CCP1Y            =  0x0004
.................... #define CCP1X            =  0x0005
.................... 
.................... #define DC1B0            =  0x0004
.................... #define DC1B1            =  0x0005
.................... 
.................... 
.................... //;----- ADCON2 Bits -----------------------------------------------------
.................... #define ADCS0            =  0x0000
.................... #define ADCS1            =  0x0001
.................... #define ADCS2            =  0x0002
.................... #define ACQT0            =  0x0003
.................... #define ACQT1            =  0x0004
.................... #define ACQT2            =  0x0005
.................... #define ADFM             =  0x0007
.................... 
.................... 
.................... //;----- ADCON1 Bits -----------------------------------------------------
.................... #define PCFG0            =  0x0000
.................... #define PCFG1            =  0x0001
.................... #define PCFG2            =  0x0002
.................... #define PCFG3            =  0x0003
.................... #define VCFG0            =  0x0004
.................... #define VCFG1            =  0x0005
.................... 
.................... 
.................... //;----- ADCON0 Bits -----------------------------------------------------
.................... #define ADON             =  0x0000
.................... #define GO               =  0x0001
.................... #define CHS0             =  0x0002
.................... #define CHS1             =  0x0003
.................... #define CHS2             =  0x0004
.................... #define CHS3             =  0x0005
.................... 
.................... #define DONE             =  0x0001
.................... 
.................... #define NOT_DONE         =  0x0001
.................... 
.................... #define GO_DONE          =  0x0001
.................... 
.................... 
.................... //;----- SSPCON2 Bits -----------------------------------------------------
.................... #define SEN              =  0x0000
.................... #define RSEN             =  0x0001
.................... #define PEN              =  0x0002
.................... #define RCEN             =  0x0003
.................... #define ACKEN            =  0x0004
.................... #define ACKDT            =  0x0005
.................... #define ACKSTAT          =  0x0006
.................... #define GCEN             =  0x0007
.................... 
.................... 
.................... //;----- SSPCON1 Bits -----------------------------------------------------
.................... #define SSPM0            =  0x0000
.................... #define SSPM1            =  0x0001
.................... #define SSPM2            =  0x0002
.................... #define SSPM3            =  0x0003
.................... #define CKP              =  0x0004
.................... #define SSPEN            =  0x0005
.................... #define SSPOV            =  0x0006
.................... #define WCOL             =  0x0007
.................... 
.................... 
.................... //;----- SSPSTAT Bits -----------------------------------------------------
.................... #define BF               =  0x0000
.................... #define UA               =  0x0001
.................... #define R                =  0x0002
.................... #define S                =  0x0003
.................... #define P                =  0x0004
.................... #define D                =  0x0005
.................... #define CKE              =  0x0006
.................... #define SMP              =  0x0007
.................... 
.................... 
.................... #define NOT_W            =  0x0002
.................... #define NOT_A            =  0x0005
.................... 
.................... #define R_W              =  0x0002
.................... #define D_A              =  0x0005
.................... 
.................... #define NOT_WRITE        =  0x0002
.................... #define NOT_ADDRESS      =  0x0005
.................... 
.................... 
.................... //;----- T2CON Bits -----------------------------------------------------
.................... #define T2CKPS0          =  0x0000
.................... #define T2CKPS1          =  0x0001
.................... #define TMR2ON           =  0x0002
.................... #define T2OUTPS0         =  0x0003
.................... #define T2OUTPS1         =  0x0004
.................... #define T2OUTPS2         =  0x0005
.................... #define T2OUTPS3         =  0x0006
.................... 
.................... #define TOUTPS0          =  0x0003
.................... #define TOUTPS1          =  0x0004
.................... #define TOUTPS2          =  0x0005
.................... #define TOUTPS3          =  0x0006
.................... 
.................... 
.................... //;----- T1CON Bits -----------------------------------------------------
.................... #define TMR1ON           =  0x0000
.................... #define TMR1CS           =  0x0001
.................... #define T1SYNC           =  0x0002
.................... #define T1OSCEN          =  0x0003
.................... #define T1CKPS0          =  0x0004
.................... #define T1CKPS1          =  0x0005
.................... #define T1RUN            =  0x0006
.................... #define RD16             =  0x0007
.................... 
.................... #define NOT_T1SYNC       =  0x0002
.................... 
.................... 
.................... //;----- RCON Bits -----------------------------------------------------
.................... #define BOR              =  0x0000
.................... #define POR              =  0x0001
.................... #define PD               =  0x0002
.................... #define TO               =  0x0003
.................... #define RI               =  0x0004
.................... #define SBOREN           =  0x0006
.................... #define IPEN             =  0x0007
.................... 
.................... #define NOT_BOR          =  0x0000
.................... #define NOT_POR          =  0x0001
.................... #define NOT_PD           =  0x0002
.................... #define NOT_TO           =  0x0003
.................... #define NOT_RI           =  0x0004
.................... 
.................... 
.................... //;----- WDTCON Bits -----------------------------------------------------
.................... #define SWDTEN           =  0x0000
.................... 
.................... #define SWDTE            =  0x0000
.................... 
.................... 
.................... //;----- HLVDCON Bits -----------------------------------------------------
.................... #define LVDL0            =  0x0000
.................... #define LVDL1            =  0x0001
.................... #define LVDL2            =  0x0002
.................... #define LVDL3            =  0x0003
.................... #define LVDEN            =  0x0004
.................... #define IRVST            =  0x0005
.................... 
.................... #define LVV0             =  0x0000
.................... #define LVV1             =  0x0001
.................... #define LVV2             =  0x0002
.................... #define LVV3             =  0x0003
.................... #define BGST             =  0x0005
.................... 
.................... #define HLVDL0           =  0x0000
.................... #define HLVDL1           =  0x0001
.................... #define HLVDL2           =  0x0002
.................... #define HLVDL3           =  0x0003
.................... #define HLVDEN           =  0x0004
.................... #define VDIRMAG          =  0x0007
.................... 
.................... #define IVRST            =  0x0005
.................... 
.................... 
.................... //;----- LVDCON Bits -----------------------------------------------------
.................... #define LVDL0            =  0x0000
.................... #define LVDL1            =  0x0001
.................... #define LVDL2            =  0x0002
.................... #define LVDL3            =  0x0003
.................... #define LVDEN            =  0x0004
.................... #define IRVST            =  0x0005
.................... 
.................... #define LVV0             =  0x0000
.................... #define LVV1             =  0x0001
.................... #define LVV2             =  0x0002
.................... #define LVV3             =  0x0003
.................... #define BGST             =  0x0005
.................... 
.................... #define HLVDL0           =  0x0000
.................... #define HLVDL1           =  0x0001
.................... #define HLVDL2           =  0x0002
.................... #define HLVDL3           =  0x0003
.................... #define HLVDEN           =  0x0004
.................... #define VDIRMAG          =  0x0007
.................... 
.................... #define IVRST            =  0x0005
.................... 
.................... 
.................... //;----- OSCCON Bits -----------------------------------------------------
.................... #define SCS0             =  0x0000
.................... #define SCS1             =  0x0001
.................... #define FLTS             =  0x0002
.................... #define OSTS             =  0x0003
.................... #define IRCF0            =  0x0004
.................... #define IRCF1            =  0x0005
.................... #define IRCF2            =  0x0006
.................... #define IDLEN            =  0x0007
.................... 
.................... #define IOFS             =  0x0002
.................... 
.................... 
.................... //;----- T0CON Bits -----------------------------------------------------
.................... #define T0PS0            =  0x0000
.................... #define T0PS1            =  0x0001
.................... #define T0PS2            =  0x0002
.................... #define T0PS3            =  0x0003
.................... #define T0SE             =  0x0004
.................... #define T0CS             =  0x0005
.................... #define T016BIT          =  0x0006
.................... #define TMR0ON           =  0x0007
.................... 
.................... #define PSA              =  0x0003
.................... #define T08BIT           =  0x0006
.................... 
.................... 
.................... //;----- STATUS Bits -----------------------------------------------------
.................... #define C                =  0x0000
.................... #define DC               =  0x0001
.................... #define Z                =  0x0002
.................... #define OV               =  0x0003
.................... #define N                =  0x0004
.................... 
.................... 
.................... //;----- INTCON3 Bits -----------------------------------------------------
.................... #define INT1F            =  0x0000
.................... #define INT2F            =  0x0001
.................... #define INT1E            =  0x0003
.................... #define INT2E            =  0x0004
.................... #define INT1P            =  0x0006
.................... #define INT2P            =  0x0007
.................... 
.................... #define INT1IF           =  0x0000
.................... #define INT2IF           =  0x0001
.................... #define INT1IE           =  0x0003
.................... #define INT2IE           =  0x0004
.................... #define INT1IP           =  0x0006
.................... #define INT2IP           =  0x0007
.................... 
.................... 
.................... //;----- INTCON2 Bits -----------------------------------------------------
.................... #define RBIP             =  0x0000
.................... #define TMR0IP           =  0x0002
.................... #define INTEDG2          =  0x0004
.................... #define INTEDG1          =  0x0005
.................... #define INTEDG0          =  0x0006
.................... #define RBPU             =  0x0007
.................... 
.................... #define NOT_RBPU         =  0x0007
.................... 
.................... 
.................... //;----- INTCON Bits -----------------------------------------------------
.................... #define RBIF             =  0x0000
.................... #define INT0F            =  0x0001
.................... #define TMR0IF           =  0x0002
.................... #define RBIE             =  0x0003
.................... #define INT0E            =  0x0004
.................... #define TMR0IE           =  0x0005
.................... #define PEIE             =  0x0006
.................... #define GIE              =  0x0007
.................... 
.................... #define INT0IF           =  0x0001
.................... #define T0IF             =  0x0002
.................... #define INT0IE           =  0x0004
.................... #define T0IE             =  0x0005
.................... #define GIEL             =  0x0006
.................... #define GIEH             =  0x0007
.................... 
.................... 
.................... //;----- STKPTR Bits -----------------------------------------------------
.................... #define SP0              =  0x0000
.................... #define SP1              =  0x0001
.................... #define SP2              =  0x0002
.................... #define SP3              =  0x0003
.................... #define SP4              =  0x0004
.................... #define STKUNF           =  0x0006
.................... #define STKFUL           =  0x0007
.................... 
.................... #define STKOVF           =  0x0007
.................... 
.................... 
.................... 
.................... /*;==========================================================================
.................... ;
.................... ;       RAM Definitions
.................... ;
.................... ;==========================================================================
....................        __MAXRAM  H'0FFF'
....................        __BADRAM  H'0F83'
....................        __BADRAM  H'0F85'-H'0F88'
....................        __BADRAM  H'0F8C'-H'0F91'
....................        __BADRAM  H'0F95'-H'0F9A'
....................        __BADRAM  H'0F9C'
....................        __BADRAM  H'0FA3'-H'0FAA'
....................        __BADRAM  H'0FB6'
....................        __BADRAM  H'0FB9'
....................        __BADRAM  H'0FD4'
.................... 
.................... ;==========================================================================
.................... ;
.................... ;   IMPORTANT: For the PIC18 devices, the __CONFIG directive has been
.................... ;              superseded by the CONFIG directive.  The following settings
.................... ;              are available for this device.
.................... ;
.................... ;   Oscillator Selection bits:
.................... ;     OSC = LP             LP oscillator
.................... ;     OSC = XT             XT oscillator
.................... ;     OSC = HS             HS oscillator
.................... ;     OSC = RC             External RC oscillator, CLKO function on RA6
.................... ;     OSC = EC             EC oscillator, CLKO function on RA6
.................... ;     OSC = ECIO6          EC oscillator, port function on RA6
.................... ;     OSC = HSPLL          HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
.................... ;     OSC = RCIO6          External RC oscillator, port function on RA6
.................... ;     OSC = INTIO67        Internal oscillator block, port function on RA6 and RA7
.................... ;     OSC = INTIO7         Internal oscillator block, CLKO function on RA6, port function on RA7
.................... ;
.................... ;   Fail-Safe Clock Monitor Enable bit:
.................... ;     FCMEN = OFF          Fail-Safe Clock Monitor disabled
.................... ;     FCMEN = ON           Fail-Safe Clock Monitor enabled
.................... ;
.................... ;   Internal/External Oscillator Switchover bit:
.................... ;     IESO = OFF           Oscillator Switchover mode disabled
.................... ;     IESO = ON            Oscillator Switchover mode enabled
.................... ;
.................... ;   Power-up Timer Enable bit:
.................... ;     PWRT = ON            PWRT enabled
.................... ;     PWRT = OFF           PWRT disabled
.................... ;
.................... ;   Brown-out Reset Enable bits:
.................... ;     BOREN = OFF          Brown-out Reset disabled in hardware and software
.................... ;     BOREN = ON           Brown-out Reset enabled and controlled by software (SBOREN is enabled)
.................... ;     BOREN = NOSLP        Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled)
.................... ;     BOREN = SBORDIS      Brown-out Reset enabled in hardware only (SBOREN is disabled)
.................... ;
.................... ;   Brown-out Voltage bits:
.................... ;     BORV = 0             Maximum setting
.................... ;     BORV = 1             
.................... ;     BORV = 2             
.................... ;     BORV = 3             Minimum setting
.................... ;
.................... ;   Watchdog Timer Enable bit:
.................... ;     WDT = OFF            WDT disabled (control is placed on the SWDTEN bit)
.................... ;     WDT = ON             WDT enabled
.................... ;
.................... ;   Watchdog Timer Postscale Select bits:
.................... ;     WDTPS = 1            1:1
.................... ;     WDTPS = 2            1:2
.................... ;     WDTPS = 4            1:4
.................... ;     WDTPS = 8            1:8
.................... ;     WDTPS = 16           1:16
.................... ;     WDTPS = 32           1:32
.................... ;     WDTPS = 64           1:64
.................... ;     WDTPS = 128          1:128
.................... ;     WDTPS = 256          1:256
.................... ;     WDTPS = 512          1:512
.................... ;     WDTPS = 1024         1:1024
.................... ;     WDTPS = 2048         1:2048
.................... ;     WDTPS = 4096         1:4096
.................... ;     WDTPS = 8192         1:8192
.................... ;     WDTPS = 16384        1:16384
.................... ;     WDTPS = 32768        1:32768
.................... ;
.................... ;   MCLR Pin Enable bit:
.................... ;     MCLRE = OFF          RE3 input pin enabled; MCLR disabled
.................... ;     MCLRE = ON           MCLR pin enabled; RE3 input pin disabled
.................... ;
.................... ;   Low-Power Timer1 Oscillator Enable bit:
.................... ;     LPT1OSC = OFF        Timer1 configured for higher power operation
.................... ;     LPT1OSC = ON         Timer1 configured for low-power operation
.................... ;
.................... ;   PORTB A/D Enable bit:
.................... ;     PBADEN = OFF         PORTB<4:0> pins are configured as digital I/O on Reset
.................... ;     PBADEN = ON          PORTB<4:0> pins are configured as analog input channels on Reset
.................... ;
.................... ;   CCP2 MUX bit:
.................... ;     CCP2MX = PORTBE      CCP2 input/output is multiplexed with RB3
.................... ;     CCP2MX = PORTC       CCP2 input/output is multiplexed with RC1
.................... ;
.................... ;   Stack Full/Underflow Reset Enable bit:
.................... ;     STVREN = OFF         Stack full/underflow will not cause Reset
.................... ;     STVREN = ON          Stack full/underflow will cause Reset
.................... ;
.................... ;   Single-Supply ICSP Enable bit:
.................... ;     LVP = OFF            Single-Supply ICSP disabled
.................... ;     LVP = ON             Single-Supply ICSP enabled
.................... ;
.................... ;   Extended Instruction Set Enable bit:
.................... ;     XINST = OFF          Instruction set extension and Indexed Addressing mode disabled (Legacy mode)
.................... ;     XINST = ON           Instruction set extension and Indexed Addressing mode enabled
.................... ;
.................... ;   Background Debugger Enable bit:
.................... ;     DEBUG = ON           Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug
.................... ;     DEBUG = OFF          Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins
.................... ;
.................... ;   Code Protection bit Block 0:
.................... ;     CP0 = ON             Block 0 (000800-003FFFh) code-protected
.................... ;     CP0 = OFF            Block 0 (000800-003FFFh) not code-protected
.................... ;
.................... ;   Code Protection bit Block 1:
.................... ;     CP1 = ON             Block 1 (004000-007FFFh) code-protected
.................... ;     CP1 = OFF            Block 1 (004000-007FFFh) not code-protected
.................... ;
.................... ;   Code Protection bit Block 2:
.................... ;     CP2 = ON             Block 2 (008000-00BFFFh) code-protected
.................... ;     CP2 = OFF            Block 2 (008000-00BFFFh) not code-protected
.................... ;
.................... ;   Boot Block Code Protection bit:
.................... ;     CPB = ON             Boot block (000000-0007FFh) code-protected
.................... ;     CPB = OFF            Boot block (000000-0007FFh) not code-protected
.................... ;
.................... ;   Write Protection bit Block 0:
.................... ;     WRT0 = ON            Block 0 (000800-003FFFh) write-protected
.................... ;     WRT0 = OFF           Block 0 (000800-003FFFh) not write-protected
.................... ;
.................... ;   Write Protection bit Block 1:
.................... ;     WRT1 = ON            Block 1 (004000-007FFFh) write-protected
.................... ;     WRT1 = OFF           Block 1 (004000-007FFFh) not write-protected
.................... ;
.................... ;   Write Protection bit Block 2:
.................... ;     WRT2 = ON            Block 2 (008000-00BFFFh) write-protected
.................... ;     WRT2 = OFF           Block 2 (008000-00BFFFh) not write-protected
.................... ;
.................... ;   Boot Block Write Protection bit:
.................... ;     WRTB = ON            Boot block (000000-0007FFh) write-protected
.................... ;     WRTB = OFF           Boot block (000000-0007FFh) not write-protected
.................... ;
.................... ;   Configuration Register Write Protection bit:
.................... ;     WRTC = ON            Configuration registers (300000-3000FFh) write-protected
.................... ;     WRTC = OFF           Configuration registers (300000-3000FFh) not write-protected
.................... ;
.................... ;   Table Read Protection bit Block 0:
.................... ;     EBTR0 = ON           Block 0 (000800-003FFFh) protected from table reads executed in other blocks
.................... ;     EBTR0 = OFF          Block 0 (000800-003FFFh) not protected from table reads executed in other blocks
.................... ;
.................... ;   Table Read Protection bit Block 1:
.................... ;     EBTR1 = ON           Block 1 (004000-007FFFh) protected from table reads executed in other blocks
.................... ;     EBTR1 = OFF          Block 1 (004000-007FFFh) not protected from table reads executed in other blocks
.................... ;
.................... ;   Table Read Protection bit Block 2:
.................... ;     EBTR2 = ON           Block 2 (008000-00BFFFh) protected from table reads executed in other blocks
.................... ;     EBTR2 = OFF          Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks
.................... ;
.................... ;   Boot Block Table Read Protection bit:
.................... ;     EBTRB = ON           Boot block (000000-0007FFh) protected from table reads executed in other blocks
.................... ;     EBTRB = OFF          Boot block (000000-0007FFh) not protected from table reads executed in other blocks
.................... ;
.................... ;==========================================================================
.................... ;==========================================================================
.................... ;
.................... ;       Configuration Bits
.................... ;
.................... ;   NAME            Address
.................... ;   CONFIG1H        300001h
.................... ;   CONFIG2L        300002h
.................... ;   CONFIG2H        300003h
.................... ;   CONFIG3H        300005h
.................... ;   CONFIG4L        300006h
.................... ;   CONFIG5L        300008h
.................... ;   CONFIG5H        300009h
.................... ;   CONFIG6L        30000Ah
.................... ;   CONFIG6H        30000Bh
.................... ;   CONFIG7L        30000Ch
.................... ;   CONFIG7H        30000Dh
.................... ;
.................... ;==========================================================================*/
.................... 
.................... //; The following is an assignment of address values for all of the
.................... //; configuration registers for the purpose of table reads
.................... //_CONFIG1H        =  0x300001
.................... //_CONFIG2L        =  0x300002
.................... //_CONFIG2H        =  0x300003
.................... //_CONFIG3H        =  0x300005
.................... //_CONFIG4L        =  0x300006
.................... //_CONFIG5L        =  0x300008
.................... //_CONFIG5H        =  0x300009
.................... //_CONFIG6L        =  0x30000A
.................... //_CONFIG6H        =  0x30000B
.................... //_CONFIG7L        =  0x30000C
.................... //_CONFIG7H        =  0x30000D
.................... 
.................... //;----- CONFIG1H Options --------------------------------------------------
.................... //_OSC_LP_1H           =  0xF0    //; LP oscillator
.................... //_OSC_XT_1H           =  0xF1    //; XT oscillator
.................... //_OSC_HS_1H           =  0xF2    //; HS oscillator
.................... //_OSC_RC_1H           =  0xF3    //; External RC oscillator, CLKO function on RA6
.................... //_OSC_EC_1H           =  0xF4    //; EC oscillator, CLKO function on RA6
.................... //_OSC_ECIO6_1H        =  0xF5    //; EC oscillator, port function on RA6
.................... //_OSC_HSPLL_1H        =  0xF6    //; HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
.................... //_OSC_RCIO6_1H        =  0xF7    //; External RC oscillator, port function on RA6
.................... //_OSC_INTIO67_1H      =  0xF8    //; Internal oscillator block, port function on RA6 and RA7
.................... //_OSC_INTIO7_1H       =  0xF9    //; Internal oscillator block, CLKO function on RA6, port function on RA7
.................... 
.................... //_FCMEN_OFF_1H        =  0xBF    //; Fail-Safe Clock Monitor disabled
.................... //_FCMEN_ON_1H         =  0xFF    //; Fail-Safe Clock Monitor enabled
.................... 
.................... //_IESO_OFF_1H         =  0x7F    //; Oscillator Switchover mode disabled
.................... //_IESO_ON_1H          =  0xFF    //; Oscillator Switchover mode enabled
.................... 
.................... //;----- CONFIG2L Options --------------------------------------------------
.................... //_PWRT_ON_2L          =  0xFE    //; PWRT enabled
.................... //_PWRT_OFF_2L         =  0xFF    //; PWRT disabled
.................... 
.................... //_BOREN_OFF_2L        =  0xF9    //; Brown-out Reset disabled in hardware and software
.................... //_BOREN_ON_2L         =  0xFB    //; Brown-out Reset enabled and controlled by software (SBOREN is enabled)
.................... //_BOREN_NOSLP_2L      =  0xFD    //; Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled)
.................... //_BOREN_SBORDIS_2L    =  0xFF    //; Brown-out Reset enabled in hardware only (SBOREN is disabled)
.................... 
.................... //_BORV_0_2L           =  0xE7    //; Maximum setting
.................... //_BORV_1_2L           =  0xEF    //; 
.................... //_BORV_2_2L           =  0xF7    //; 
.................... //_BORV_3_2L           =  0xFF    //; Minimum setting
.................... 
.................... //;----- CONFIG2H Options --------------------------------------------------
.................... //_WDT_OFF_2H          =  0xFE    //; WDT disabled (control is placed on the SWDTEN bit)
.................... //_WDT_ON_2H           =  0xFF    //; WDT enabled
.................... 
.................... //_WDTPS_1_2H          =  0xE1    //; 1:1
.................... //_WDTPS_2_2H          =  0xE3    //; 1:2
.................... //_WDTPS_4_2H          =  0xE5    //; 1:4
.................... //_WDTPS_8_2H          =  0xE7    //; 1:8
.................... //_WDTPS_16_2H         =  0xE9    //; 1:16
.................... //_WDTPS_32_2H         =  0xEB    //; 1:32
.................... //_WDTPS_64_2H         =  0xED    //; 1:64
.................... //_WDTPS_128_2H        =  0xEF    //; 1:128
.................... //_WDTPS_256_2H        =  0xF1    //; 1:256
.................... //_WDTPS_512_2H        =  0xF3    //; 1:512
.................... //_WDTPS_1024_2H       =  0xF5    //; 1:1024
.................... //_WDTPS_2048_2H       =  0xF7    //; 1:2048
.................... //_WDTPS_4096_2H       =  0xF9    //; 1:4096
.................... //_WDTPS_8192_2H       =  0xFB    //; 1:8192
.................... //_WDTPS_16384_2H      =  0xFD    //; 1:16384
.................... //_WDTPS_32768_2H      =  0xFF    //; 1:32768
.................... 
.................... //;----- CONFIG3H Options --------------------------------------------------
.................... //_MCLRE_OFF_3H        =  0x7F    //; RE3 input pin enabled; MCLR disabled
.................... //_MCLRE_ON_3H         =  0xFF    //; MCLR pin enabled; RE3 input pin disabled
.................... 
.................... //_LPT1OSC_OFF_3H      =  0xFB    //; Timer1 configured for higher power operation
.................... //_LPT1OSC_ON_3H       =  0xFF    //; Timer1 configured for low-power operation
.................... 
.................... //_PBADEN_OFF_3H       =  0xFD    //; PORTB<4:0> pins are configured as digital I/O on Reset
.................... //_PBADEN_ON_3H        =  0xFF    //; PORTB<4:0> pins are configured as analog input channels on Reset
.................... 
.................... //_CCP2MX_PORTBE_3H    =  0xFE    //; CCP2 input/output is multiplexed with RB3
.................... //_CCP2MX_PORTC_3H     =  0xFF    //; CCP2 input/output is multiplexed with RC1
.................... 
.................... //;----- CONFIG4L Options --------------------------------------------------
.................... //_STVREN_OFF_4L       =  0xFE    //; Stack full/underflow will not cause Reset
.................... //_STVREN_ON_4L        =  0xFF    //; Stack full/underflow will cause Reset
.................... 
.................... //_LVP_OFF_4L          =  0xFB    //; Single-Supply ICSP disabled
.................... //_LVP_ON_4L           =  0xFF    //; Single-Supply ICSP enabled
.................... 
.................... //_XINST_OFF_4L        =  0xBF    //; Instruction set extension and Indexed Addressing mode disabled (Legacy mode)
.................... //_XINST_ON_4L         =  0xFF    //; Instruction set extension and Indexed Addressing mode enabled
.................... 
.................... //_DEBUG_ON_4L         =  0x7F    //; Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug
.................... //_DEBUG_OFF_4L        =  0xFF    //; Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins
.................... 
.................... //;----- CONFIG5L Options --------------------------------------------------
.................... //_CP0_ON_5L           =  0xFE    //; Block 0 (000800-003FFFh) code-protected
.................... //_CP0_OFF_5L          =  0xFF    //; Block 0 (000800-003FFFh) not code-protected
.................... 
.................... //_CP1_ON_5L           =  0xFD    //; Block 1 (004000-007FFFh) code-protected
.................... //_CP1_OFF_5L          =  0xFF    //; Block 1 (004000-007FFFh) not code-protected
.................... 
.................... //_CP2_ON_5L           =  0xFB    //; Block 2 (008000-00BFFFh) code-protected
.................... //_CP2_OFF_5L          =  0xFF    //; Block 2 (008000-00BFFFh) not code-protected
.................... 
.................... //;----- CONFIG5H Options --------------------------------------------------
.................... //_CPB_ON_5H           =  0xBF    //; Boot block (000000-0007FFh) code-protected
.................... //_CPB_OFF_5H          =  0xFF    //; Boot block (000000-0007FFh) not code-protected
.................... 
.................... //;----- CONFIG6L Options --------------------------------------------------
.................... //_WRT0_ON_6L          =  0xFE    //; Block 0 (000800-003FFFh) write-protected
.................... //_WRT0_OFF_6L         =  0xFF    //; Block 0 (000800-003FFFh) not write-protected
.................... 
.................... //_WRT1_ON_6L          =  0xFD    //; Block 1 (004000-007FFFh) write-protected
.................... //_WRT1_OFF_6L         =  0xFF    //; Block 1 (004000-007FFFh) not write-protected
.................... 
.................... //_WRT2_ON_6L          =  0xFB    //; Block 2 (008000-00BFFFh) write-protected
.................... //_WRT2_OFF_6L         =  0xFF    //; Block 2 (008000-00BFFFh) not write-protected
.................... 
.................... //;----- CONFIG6H Options --------------------------------------------------
.................... //_WRTB_ON_6H          =  0xBF    //; Boot block (000000-0007FFh) write-protected
.................... //_WRTB_OFF_6H         =  0xFF    //; Boot block (000000-0007FFh) not write-protected
.................... 
.................... //_WRTC_ON_6H          =  0xDF    //; Configuration registers (300000-3000FFh) write-protected
.................... //_WRTC_OFF_6H         =  0xFF    //; Configuration registers (300000-3000FFh) not write-protected
.................... 
.................... //;----- CONFIG7L Options --------------------------------------------------
.................... //_EBTR0_ON_7L         =  0xFE    //; Block 0 (000800-003FFFh) protected from table reads executed in other blocks
.................... //_EBTR0_OFF_7L        =  0xFF    //; Block 0 (000800-003FFFh) not protected from table reads executed in other blocks
.................... 
.................... //_EBTR1_ON_7L         =  0xFD    //; Block 1 (004000-007FFFh) protected from table reads executed in other blocks
.................... //_EBTR1_OFF_7L        =  0xFF    //; Block 1 (004000-007FFFh) not protected from table reads executed in other blocks
.................... 
.................... //_EBTR2_ON_7L         =  0xFB    //; Block 2 (008000-00BFFFh) protected from table reads executed in other blocks
.................... //_EBTR2_OFF_7L        =  0xFF    //; Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks
.................... 
.................... //;----- CONFIG7H Options --------------------------------------------------
.................... //_EBTRB_ON_7H         =  0xBF    //; Boot block (000000-0007FFh) protected from table reads executed in other blocks
.................... //_EBTRB_OFF_7H        =  0xFF    //; Boot block (000000-0007FFh) not protected from table reads executed in other blocks
.................... 
.................... 
.................... //_DEVID1          =  0x3FFFFE
.................... //_DEVID2          =  0x3FFFFF
.................... 
.................... //_IDLOC0          =  0x200000
.................... //_IDLOC1          =  0x200001
.................... //_IDLOC2          =  0x200002
.................... //_IDLOC3          =  0x200003
.................... //_IDLOC4          =  0x200004
.................... //_IDLOC5          =  0x200005
.................... //_IDLOC6          =  0x200006
.................... //_IDLOC7          =  0x200007
.................... 
....................  //       LIST
.................... 
.................... 
.................... #use delay(internal = 8000000)
*
025A:  CLRF   FEA
025C:  MOVLW  63
025E:  MOVWF  FE9
0260:  MOVF   FEF,W
0262:  BZ    027E
0264:  MOVLW  02
0266:  MOVWF  01
0268:  CLRF   00
026A:  DECFSZ 00,F
026C:  BRA    026A
026E:  DECFSZ 01,F
0270:  BRA    0268
0272:  MOVLW  97
0274:  MOVWF  00
0276:  DECFSZ 00,F
0278:  BRA    0276
027A:  DECFSZ FEF,F
027C:  BRA    0264
027E:  RETURN 0
.................... 
.................... #zero_ram
.................... 
.................... typedef enum
.................... {
....................     BTN_CHAN1       = 0x81,
....................     BTN_SERVICE     = 0x82,
....................     BTN_CHAN2       = 0x83,
....................     BTN_DISPL       = 0x84,
....................     BTN_TIME        = 0x85,
....................     BTN_MEMORY      = 0x86,
....................     BTN_TRIG        = 0x87,
....................     BTN_START       = 0x88,
....................     BTN_CURSOSR     = 0x89,
....................     BTN_MEAS        = 0x8a,
....................     BTN_HELP        = 0x8c,
....................     BTN_MENU        = 0x8d,
....................     BTN_F1          = 0x8e,
....................     BTN_F2          = 0x8f,
....................     BTN_F3          = 0x90,
....................     BTN_F4          = 0x91,
....................     BTN_F5          = 0x92,
....................     BTN_R_RANGE1    = 0x9c,
....................     BTN_R_RSHIFT1   = 0x9d,
....................     BTN_R_RANGE2    = 0x9e,
....................     BTN_R_RSHIFT2   = 0x9f,
....................     BTN_R_TBASE     = 0xa0,
....................     BTN_R_TSHIFT    = 0xa1,
....................     BTN_R_TRIGLEV   = 0xa2,
....................     BTN_R_SET       = 0xa3
.................... } Button;
.................... 
.................... #define SL0 PIN_B0
.................... #define SL1 PIN_B1
.................... #define SL2 PIN_B2
.................... #define SL3 PIN_B3
.................... #define SL4 PIN_B4
.................... #define SL5 PIN_B5
.................... 
.................... /// Лампочка КАНАЛ 1
.................... #define sw_K1 PIN_C0
.................... /// Лампочка КАНАЛ 2
.................... #define sw_K2 PIN_C1
.................... /// Лампочка СИНХРОНИЗАЦИЯ
.................... #define sw_Sx PIN_C2
.................... 
.................... /// Инициализация аппаратной части
.................... void InitHardware(void);
.................... /// Подать питание на основные платы
.................... void PressPowerOn(void);
.................... /// Снять питание с основных плат
.................... void PressPowerOff(void);
.................... 
.................... char PressButton(char bit, char transDataPress);
.................... 
.................... static void PutInBufferWithRuk(char ib, char forZero);
.................... 
.................... static void PutInBuffer(char ib, char forZero);
.................... 
.................... static char PressButtons(char num, char bits[], char dataPress[]);
.................... 
.................... static char RotateSwitchGovernor(char forZero);
.................... 
.................... static char RotateGovernor(char cond, char b, char forZero);
.................... /// Обработка SL0
.................... static void FuncSL0(void);
.................... /// Обработка SL1
.................... static void FuncSL1(void);
.................... /// Обработка SL2
.................... static void FuncSL2(void);
.................... /// Обработка SL3
.................... static void FuncSL3(void);
.................... /// Обработка SL4
.................... static void FuncSL4(void);
.................... /// Обработка SL5
.................... static void FuncSL5(void);
.................... /// Определим, произошло ли изменение состояния органая управления
.................... static char FindStableChange(void);
.................... /// Маски для установки последовательно SL0-SL5
.................... const char maskSL[6] = {0x3e, 0x3d, 0x3b, 0x37, 0x2f, 0x1f};
.................... /// Маски для проверки нажатой кнопки. Сравниваются с RL0-RL7 для данного SL
.................... const char maskRL[6] = {0xc9, 0xc9, 0xc9, 0x59, 0x7f, 0x49};
.................... /// Текущее состояние пинов RL
.................... char curStateRB = 0;
.................... /// Прошлое состояние пинов SL
.................... char oldStateRB[6] = {0};
.................... /// Номер текущего sl
.................... char sl = 0;
.................... /// Переданные данные
.................... char transData = 0;
.................... /// Принятые данные
.................... char recvData = 0;
.................... /// Если 1, то принята команда включения питания
.................... char recvPowerOn = 0;
.................... /// Если 1, то принята команда выключения питания
.................... char recvPowerOff = 0;
.................... /// == 0, если бит 1 curStateRB == 0
.................... static char bit1 = 0;
.................... /// == 0, если бит 2 curStateRB == 0
.................... static char bit2 = 0;
.................... /// != 0, если биты 4 и 5 == 1
.................... static char bits45 = 0;
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... void main()
*
069E:  CLRF   FF8
06A0:  BCF    FD0.7
06A2:  BSF    07.7
06A4:  MOVLW  7E
06A6:  MOVWF  00
06A8:  MOVLW  10
06AA:  MOVWF  01
06AC:  MOVLW  02
06AE:  MOVWF  FE9
06B0:  MOVLW  00
06B2:  MOVWF  FEA
06B4:  CLRF   FEE
06B6:  CLRWDT
06B8:  DECFSZ 00,F
06BA:  BRA    06B4
06BC:  DECFSZ 01,F
06BE:  BRA    06B4
06C0:  MOVLW  70
06C2:  MOVWF  FD3
06C4:  CLRF   F9B
06C6:  MOVF   FD3,W
06C8:  CLRF   1A
06CA:  CLRF   21
06CC:  CLRF   22
06CE:  CLRF   23
06D0:  CLRF   24
06D2:  CLRF   25
06D4:  MOVF   FC1,W
06D6:  ANDLW  C0
06D8:  IORLW  0F
06DA:  MOVWF  FC1
06DC:  MOVLW  07
06DE:  MOVWF  FB4
06E0:  BRA    0722
06E2:  DATA 06,40
06E4:  DATA 1B,00
06E6:  DATA 04,40
06E8:  DATA 26,00
06EA:  DATA 35,80
06EC:  DATA 03,07
06EE:  DATA 06,81
06F0:  DATA 9C,9D
06F2:  DATA 8D,00
06F4:  DATA 03,07
06F6:  DATA 06,83
06F8:  DATA 9E,9F
06FA:  DATA 8E,00
06FC:  DATA 03,07
06FE:  DATA 06,85
0700:  DATA A0,A1
0702:  DATA 8F,00
0704:  DATA 03,04
0706:  DATA 06,87
0708:  DATA A2,88
070A:  DATA 90,00
070C:  DATA 01,02
070E:  DATA 03,04
0710:  DATA 05,06
0712:  DATA 89,8A
0714:  DATA 84,8C
0716:  DATA 86,82
0718:  DATA 91,03
071A:  DATA 06,A3
071C:  DATA 92,00
071E:  DATA 10,11
0720:  DATA 12,00
0722:  MOVLW  00
0724:  MOVWF  FF8
0726:  MOVLW  06
0728:  MOVWF  FF7
072A:  MOVLW  E2
072C:  MOVWF  FF6
072E:  TBLRD*+
0730:  MOVF   FF5,W
0732:  MOVWF  00
0734:  XORLW  00
0736:  BZ    075E
0738:  TBLRD*+
073A:  MOVF   FF5,W
073C:  MOVWF  01
073E:  BTFSC  FE8.7
0740:  BRA    074C
0742:  ANDLW  3F
0744:  MOVWF  FEA
0746:  TBLRD*+
0748:  MOVFF  FF5,FE9
074C:  BTFSC  01.6
074E:  TBLRD*+
0750:  BTFSS  01.6
0752:  TBLRD*+
0754:  MOVFF  FF5,FEE
0758:  DCFSNZ 00,F
075A:  BRA    072E
075C:  BRA    0750
075E:  CLRF   FF8
.................... {
....................     InitHardware();
0760:  BRA    020E
.................... 
....................     //СОСТОЯНИЕ кнопок и ручек по ВКЛЮЧЕНИЮ:
....................     //----------------------------------------
....................     for (sl = 0; sl < 6; sl++)
0762:  CLRF   21
0764:  MOVF   21,W
0766:  SUBLW  05
0768:  BNC   0796
....................     {
....................         OUTPUT_B(PORTB & 0xc0 | maskSL[sl]);
076A:  MOVF   F81,W
076C:  ANDLW  C0
076E:  MOVWF  61
0770:  CLRF   03
0772:  MOVF   21,W
0774:  RCALL  00AE
0776:  IORWF  61,F
0778:  CLRF   F93
077A:  MOVFF  61,F8A
....................         oldStateRB[sl] = INPUT_A();
077E:  CLRF   03
0780:  MOVF   21,W
0782:  ADDLW  1B
0784:  MOVWF  FE9
0786:  MOVLW  00
0788:  ADDWFC 03,W
078A:  MOVWF  FEA
078C:  SETF   F92
078E:  MOVFF  F80,FEF
0792:  INCF   21,F
0794:  BRA    0764
....................     }
.................... 
....................     while (TRUE)
....................     {
....................         for (sl = 0; sl < 6; sl++)
0796:  CLRF   21
0798:  MOVF   21,W
079A:  SUBLW  05
079C:  BNC   07FC
....................         {
....................             if (FindStableChange())         // Если состояние органов управление изменилось по сравнению с предыдущим
079E:  BRA    0280
07A0:  MOVF   01,F
07A2:  BZ    07EE
....................             {
....................                 bit1 = curStateRB & 0x02;
07A4:  MOVF   1A,W
07A6:  ANDLW  02
07A8:  MOVWF  26
....................                 bit2 = curStateRB & 0x04;
07AA:  MOVF   1A,W
07AC:  ANDLW  04
07AE:  MOVWF  27
....................                 bits45 = (curStateRB & 0x10) && (curStateRB & 0x20);
07B0:  BTFSS  1A.4
07B2:  BRA    07B8
07B4:  BTFSC  1A.5
07B6:  BRA    07BC
07B8:  MOVLW  00
07BA:  BRA    07BE
07BC:  MOVLW  01
07BE:  MOVWF  28
.................... 
....................                 typedef void(*pFuncVV)(void);
.................... 
....................                 static const pFuncVV funcSL[] = {FuncSL0, FuncSL1, FuncSL2, FuncSL3, FuncSL4, FuncSL5};
.................... 
....................                 pFuncVV func = funcSL[sl];
07C0:  BCF    FD8.0
07C2:  RLCF   21,W
07C4:  CLRF   03
07C6:  RCALL  00DA
07C8:  TBLRD*+
07CA:  MOVFF  FF5,03
07CE:  MOVWF  5F
07D0:  MOVFF  03,60
....................                 func();
07D4:  CLRF   FEA
07D6:  MOVLW  5F
07D8:  MOVWF  FE9
07DA:  RCALL  00F6
.................... 
....................                 oldStateRB[sl] = curStateRB;
07DC:  CLRF   03
07DE:  MOVF   21,W
07E0:  ADDLW  1B
07E2:  MOVWF  FE9
07E4:  MOVLW  00
07E6:  ADDWFC 03,W
07E8:  MOVWF  FEA
07EA:  MOVFF  1A,FEF
....................             }
.................... 
....................             if (recvPowerOff == 1)
07EE:  DECFSZ 25,W
07F0:  BRA    07F8
....................             {
....................                 OUTPUT_LOW(PIN_C7);
07F2:  BCF    F94.7
07F4:  BCF    F8B.7
....................                 recvPowerOff = 0;
07F6:  CLRF   25
....................             }
07F8:  INCF   21,F
07FA:  BRA    0798
....................         }
07FC:  BRA    0796
....................     }
.................... }
.................... 
07FE:  SLEEP 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... void PressPowerOn(void)
.................... {
....................     OUTPUT_HIGH(PIN_C7);
*
0636:  BCF    F94.7
0638:  BSF    F8B.7
....................     recvPowerOn = 1;
063A:  MOVLW  01
063C:  MOVWF  24
063E:  GOTO   064C (RETURN)
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... void PressPowerOff(void)
.................... {
....................     OUTPUT_HIGH(sw_K1);
*
0142:  BCF    F94.0
0144:  BSF    F8B.0
....................     OUTPUT_HIGH(sw_K2);
0146:  BCF    F94.1
0148:  BSF    F8B.1
....................     OUTPUT_HIGH(sw_Sx);
014A:  BCF    F94.2
014C:  BSF    F8B.2
....................     OUTPUT_LOW(PIN_C7);
014E:  BCF    F94.7
0150:  BCF    F8B.7
....................     recvPowerOn = 0;
0152:  CLRF   24
0154:  RETURN 0
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... char PressButton(char bit, char transDataPress)
.................... {
.................... #define BIT_A(bit) (INPUT_A() & (1 << bit))
.................... 
....................     if(!(curStateRB & (1 << bit)))
*
0340:  MOVLW  01
0342:  MOVWF  00
0344:  MOVF   69,W
0346:  MOVWF  01
0348:  BZ    0352
034A:  BCF    FD8.0
034C:  RLCF   00,F
034E:  DECFSZ 01,F
0350:  BRA    034A
0352:  MOVF   00,W
0354:  ANDWF  1A,W
0356:  BNZ   03B0
....................     {
....................         transData = transDataPress;
0358:  MOVFF  6A,22
....................         while(!(BIT_A(bit)))                                                // Пока нажата соответствующая кнопка
035C:  SETF   F92
035E:  MOVFF  F80,6B
0362:  MOVLW  01
0364:  MOVWF  00
0366:  MOVF   69,W
0368:  MOVWF  01
036A:  BZ    0374
036C:  BCF    FD8.0
036E:  RLCF   00,F
0370:  DECFSZ 01,F
0372:  BRA    036C
0374:  MOVF   00,W
0376:  ANDWF  6B,W
0378:  BNZ   039E
....................         {
....................             if((transDataPress == BTN_CURSOSR) && !BIT_A(2) && !BIT_A(4))   // Если нажаты кнопки КУРСОРЫ, ДИСПЛЕЙ и ПАМЯТЬ
037A:  MOVF   6A,W
037C:  SUBLW  89
037E:  BNZ   039C
0380:  SETF   F92
0382:  BTFSC  F80.2
0384:  BRA    039C
0386:  SETF   F92
0388:  BTFSC  F80.4
038A:  BRA    039C
....................             {
....................                 while(transData != 0) {};
038C:  MOVF   22,F
038E:  BTFSS  FD8.2
0390:  BRA    038C
....................                 transData = 0x24;
0392:  MOVLW  24
0394:  MOVWF  22
....................                 return 1;
0396:  MOVLW  01
0398:  MOVWF  01
039A:  BRA    03B4
....................             }
039C:  BRA    035C
....................         };
....................         while(transData != 0) {};
039E:  MOVF   22,F
03A0:  BTFSS  FD8.2
03A2:  BRA    039E
....................         transData = transDataPress - 0x80;
03A4:  MOVLW  80
03A6:  SUBWF  6A,W
03A8:  MOVWF  22
....................         return 1;
03AA:  MOVLW  01
03AC:  MOVWF  01
03AE:  BRA    03B4
....................     }
....................     return 0;
03B0:  MOVLW  00
03B2:  MOVWF  01
03B4:  GOTO   03E2 (RETURN)
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static void PutInBufferWithRuk(char ib, char forZero)
.................... {
....................     if (ib == 0)
*
03F6:  MOVF   64,F
03F8:  BNZ   0400
....................     {
....................         transData = forZero; // Влево
03FA:  MOVFF  65,22
....................     }
03FE:  BRA    040A
....................     else if (ib == 1)
0400:  DECFSZ 64,W
0402:  BRA    040A
....................     {
....................         transData = forZero + 0x80;  // Вправо
0404:  MOVLW  80
0406:  ADDWF  65,W
0408:  MOVWF  22
....................     }
040A:  RETURN 0
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static void PutInBuffer(char ib, char forZero)
.................... {
....................     if (ib == 0)
*
04DE:  MOVF   66,F
04E0:  BNZ   04E8
....................     {
....................         transData = forZero;
04E2:  MOVFF  67,22
....................     }
04E6:  BRA    04F2
....................     else if (ib == 1)
04E8:  DECFSZ 66,W
04EA:  BRA    04F2
....................     {
....................         transData = forZero + 0x80;
04EC:  MOVLW  80
04EE:  ADDWF  67,W
04F0:  MOVWF  22
....................     }
04F2:  GOTO   054E (RETURN)
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static char PressButtons(char num, char bits[], char dataPress[])
.................... {
....................     for (char i = 0; i < num; i++)
*
03B8:  CLRF   66
03BA:  MOVF   61,W
03BC:  SUBWF  66,W
03BE:  BC    03F0
....................     {
....................         if (PressButton(bits[i], dataPress[i]))
03C0:  MOVF   66,W
03C2:  ADDWF  62,W
03C4:  MOVWF  FE9
03C6:  MOVLW  00
03C8:  ADDWFC 63,W
03CA:  MOVWF  FEA
03CC:  MOVFF  FEF,69
03D0:  MOVF   66,W
03D2:  ADDWF  64,W
03D4:  MOVWF  FE9
03D6:  MOVLW  00
03D8:  ADDWFC 65,W
03DA:  MOVWF  FEA
03DC:  MOVFF  FEF,6A
03E0:  BRA    0340
03E2:  MOVF   01,F
03E4:  BZ    03EC
....................         {
....................             return 1;
03E6:  MOVLW  01
03E8:  MOVWF  01
03EA:  BRA    03F4
....................         }
03EC:  INCF   66,F
03EE:  BRA    03BA
....................     }
.................... 
....................     return 0;
03F0:  MOVLW  00
03F2:  MOVWF  01
03F4:  RETURN 0
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static char RotateSwitchGovernor(char forZero)
.................... {
....................     if (bit1 && bit2)
*
040C:  MOVF   26,F
040E:  BZ    0472
0410:  MOVF   27,F
0412:  BZ    0472
....................     {
....................         for (char ib = 0; ib < 2; ib++)
0414:  CLRF   62
0416:  MOVF   62,W
0418:  SUBLW  01
041A:  BNC   0472
....................         {
....................             if ((curStateRB & (0x02 << ib)) && (!(oldStateRB[sl] & (0x02 << ib))))
041C:  MOVLW  02
041E:  MOVWF  00
0420:  MOVF   62,W
0422:  MOVWF  01
0424:  BZ    042E
0426:  BCF    FD8.0
0428:  RLCF   00,F
042A:  DECFSZ 01,F
042C:  BRA    0426
042E:  MOVF   00,W
0430:  ANDWF  1A,W
0432:  BZ    046E
0434:  CLRF   03
0436:  MOVF   21,W
0438:  ADDLW  1B
043A:  MOVWF  FE9
043C:  MOVLW  00
043E:  ADDWFC 03,W
0440:  MOVWF  FEA
0442:  MOVFF  FEF,64
0446:  MOVLW  02
0448:  MOVWF  00
044A:  MOVF   62,W
044C:  MOVWF  01
044E:  BZ    0458
0450:  BCF    FD8.0
0452:  RLCF   00,F
0454:  DECFSZ 01,F
0456:  BRA    0450
0458:  MOVF   00,W
045A:  ANDWF  64,W
045C:  BNZ   046E
....................             {
....................                 PutInBufferWithRuk(ib, forZero);
045E:  MOVFF  62,64
0462:  MOVFF  61,65
0466:  RCALL  03F6
....................                 return 1;
0468:  MOVLW  01
046A:  MOVWF  01
046C:  BRA    04DC
....................             }
046E:  INCF   62,F
0470:  BRA    0416
....................         }
....................     }
.................... 
....................     if (!bit1 && !bit2)
0472:  MOVF   26,F
0474:  BNZ   04D8
0476:  MOVF   27,F
0478:  BNZ   04D8
....................     {
....................         for (char ib = 0; ib < 2; ib++)
047A:  CLRF   63
047C:  MOVF   63,W
047E:  SUBLW  01
0480:  BNC   04D8
....................         {
....................             if (!(curStateRB & (0x02 << ib)) && ((oldStateRB[sl] & (0x02 << ib))))
0482:  MOVLW  02
0484:  MOVWF  00
0486:  MOVF   63,W
0488:  MOVWF  01
048A:  BZ    0494
048C:  BCF    FD8.0
048E:  RLCF   00,F
0490:  DECFSZ 01,F
0492:  BRA    048C
0494:  MOVF   00,W
0496:  ANDWF  1A,W
0498:  BNZ   04D4
049A:  CLRF   03
049C:  MOVF   21,W
049E:  ADDLW  1B
04A0:  MOVWF  FE9
04A2:  MOVLW  00
04A4:  ADDWFC 03,W
04A6:  MOVWF  FEA
04A8:  MOVFF  FEF,64
04AC:  MOVLW  02
04AE:  MOVWF  00
04B0:  MOVF   63,W
04B2:  MOVWF  01
04B4:  BZ    04BE
04B6:  BCF    FD8.0
04B8:  RLCF   00,F
04BA:  DECFSZ 01,F
04BC:  BRA    04B6
04BE:  MOVF   00,W
04C0:  ANDWF  64,W
04C2:  BZ    04D4
....................             {
....................                 PutInBufferWithRuk(ib, forZero);
04C4:  MOVFF  63,64
04C8:  MOVFF  61,65
04CC:  RCALL  03F6
....................                 return 1;
04CE:  MOVLW  01
04D0:  MOVWF  01
04D2:  BRA    04DC
....................             }
04D4:  INCF   63,F
04D6:  BRA    047C
....................         }
....................     }
.................... 
....................     return 0;
04D8:  MOVLW  00
04DA:  MOVWF  01
04DC:  RETURN 0
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static char RotateGovernor(char cond, char b, char forZero)
.................... {
....................     if (cond)
*
04F6:  MOVF   62,F
04F8:  BZ    0558
....................     {
....................         for (char ib = 0; ib < 2; ib++)
04FA:  CLRF   65
04FC:  MOVF   65,W
04FE:  SUBLW  01
0500:  BNC   0558
....................         {
....................             if ((curStateRB & (b << ib)) && (!(oldStateRB[sl] & (b << ib))))
0502:  MOVFF  63,00
0506:  MOVF   65,W
0508:  MOVWF  01
050A:  BZ    0514
050C:  BCF    FD8.0
050E:  RLCF   00,F
0510:  DECFSZ 01,F
0512:  BRA    050C
0514:  MOVF   00,W
0516:  ANDWF  1A,W
0518:  BZ    0554
051A:  CLRF   03
051C:  MOVF   21,W
051E:  ADDLW  1B
0520:  MOVWF  FE9
0522:  MOVLW  00
0524:  ADDWFC 03,W
0526:  MOVWF  FEA
0528:  MOVFF  FEF,66
052C:  MOVFF  63,00
0530:  MOVF   65,W
0532:  MOVWF  01
0534:  BZ    053E
0536:  BCF    FD8.0
0538:  RLCF   00,F
053A:  DECFSZ 01,F
053C:  BRA    0536
053E:  MOVF   00,W
0540:  ANDWF  66,W
0542:  BNZ   0554
....................             {
....................                 PutInBuffer(ib, forZero);
0544:  MOVFF  65,66
0548:  MOVFF  64,67
054C:  BRA    04DE
....................                 return 1;
054E:  MOVLW  01
0550:  MOVWF  01
0552:  BRA    055C
....................             }
0554:  INCF   65,F
0556:  BRA    04FC
....................         }
....................     }
....................     return 0;
0558:  MOVLW  00
055A:  MOVWF  01
055C:  RETURN 0
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static void FuncSL0(void)
.................... {
....................     static char bits[] = {0, 3, 7, 6};
....................     // №1   №28   № 29 
....................     static char data[] = {BTN_CHAN1, BTN_R_RANGE1, BTN_R_RSHIFT1, BTN_MENU};
.................... 
....................     if (!PressButtons(4, bits, data))               // Сначала проверяем кнопки на SL0
055E:  MOVLW  04
0560:  MOVWF  61
0562:  CLRF   63
0564:  MOVLW  29
0566:  MOVWF  62
0568:  CLRF   65
056A:  MOVLW  2D
056C:  MOVWF  64
056E:  RCALL  03B8
0570:  MOVF   01,F
0572:  BNZ   058C
....................     {
....................         if (!RotateSwitchGovernor(0x14))            // ВОЛЬТ/ДЕЛ 1
0574:  MOVLW  14
0576:  MOVWF  61
0578:  RCALL  040C
057A:  MOVF   01,F
057C:  BNZ   058C
....................         {
....................             RotateGovernor(bits45, 0x10, 0x15);     // RShift1
057E:  MOVFF  28,62
0582:  MOVLW  10
0584:  MOVWF  63
0586:  MOVLW  15
0588:  MOVWF  64
058A:  RCALL  04F6
....................         }
....................     }
058C:  RETURN 0
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static void FuncSL1(void)
.................... {
....................     static char bits[] = {0, 3, 7, 6};
....................     static char data[] = {BTN_CHAN2, BTN_R_RANGE2, BTN_R_RSHIFT2, BTN_F1};
....................     if (!PressButtons(4, bits, data))
058E:  MOVLW  04
0590:  MOVWF  61
0592:  CLRF   63
0594:  MOVLW  31
0596:  MOVWF  62
0598:  CLRF   65
059A:  MOVLW  35
059C:  MOVWF  64
059E:  RCALL  03B8
05A0:  MOVF   01,F
05A2:  BNZ   05BC
....................     {
....................         if (!RotateSwitchGovernor(0x16))            // ВОЛЬТ/ДЕЛ 2
05A4:  MOVLW  16
05A6:  MOVWF  61
05A8:  RCALL  040C
05AA:  MOVF   01,F
05AC:  BNZ   05BC
....................         {
....................             RotateGovernor(bits45, 0x10, 0x17);     // RShift2
05AE:  MOVFF  28,62
05B2:  MOVLW  10
05B4:  MOVWF  63
05B6:  MOVLW  17
05B8:  MOVWF  64
05BA:  RCALL  04F6
....................         }
....................     }
05BC:  RETURN 0
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static void FuncSL2(void)
.................... {
....................     static char bits[] = {0, 3, 7, 6};
....................     static char data[] = {BTN_TIME, BTN_R_TBASE, BTN_R_TSHIFT, BTN_F2};
.................... 
....................     if (!PressButtons(4, bits, data))
05BE:  MOVLW  04
05C0:  MOVWF  61
05C2:  CLRF   63
05C4:  MOVLW  39
05C6:  MOVWF  62
05C8:  CLRF   65
05CA:  MOVLW  3D
05CC:  MOVWF  64
05CE:  RCALL  03B8
05D0:  MOVF   01,F
05D2:  BNZ   05EC
....................     {
....................         if (!RotateSwitchGovernor(0x18))            // ВРЕМЯ/ДЕЛ
05D4:  MOVLW  18
05D6:  MOVWF  61
05D8:  RCALL  040C
05DA:  MOVF   01,F
05DC:  BNZ   05EC
....................         {
....................             RotateGovernor(bits45, 0x10, 0x19);     // TShift
05DE:  MOVFF  28,62
05E2:  MOVLW  10
05E4:  MOVWF  63
05E6:  MOVLW  19
05E8:  MOVWF  64
05EA:  RCALL  04F6
....................         }
....................     }
05EC:  RETURN 0
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static void FuncSL3(void)
.................... {
....................     static char bits[] = {0, 3, 4, 6};
....................     static char data[] = {BTN_TRIG, BTN_R_TRIGLEV, BTN_START, BTN_F3};
.................... 
....................     if (!PressButtons(4, bits, data))
05EE:  MOVLW  04
05F0:  MOVWF  61
05F2:  CLRF   63
05F4:  MOVLW  41
05F6:  MOVWF  62
05F8:  CLRF   65
05FA:  MOVLW  45
05FC:  MOVWF  64
05FE:  RCALL  03B8
0600:  MOVF   01,F
0602:  BNZ   0620
....................     {
....................         RotateGovernor(bit1 && bit2, 0x02, 0x1a);   // TrigLev
0604:  MOVF   26,F
0606:  BZ    060C
0608:  MOVF   27,F
060A:  BNZ   0610
060C:  MOVLW  00
060E:  BRA    0612
0610:  MOVLW  01
0612:  MOVWF  61
0614:  MOVWF  62
0616:  MOVLW  02
0618:  MOVWF  63
061A:  MOVLW  1A
061C:  MOVWF  64
061E:  RCALL  04F6
....................     }
0620:  RETURN 0
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static void FuncSL4(void)
.................... {
....................     static char bits[] = {0, 1, 2, 3, 4, 5, 6};
....................     static char data[] = {BTN_CURSOSR, BTN_MEAS, BTN_DISPL, BTN_HELP, BTN_MEMORY, BTN_SERVICE, BTN_F4};
.................... 
....................     PressButtons(7, bits, data);
0622:  MOVLW  07
0624:  MOVWF  61
0626:  CLRF   63
0628:  MOVLW  49
062A:  MOVWF  62
062C:  CLRF   65
062E:  MOVLW  50
0630:  MOVWF  64
0632:  RCALL  03B8
0634:  RETURN 0
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static void FuncSL5(void)
.................... {
....................     //Pit,Men "5", Сброс Установки:
.................... 
....................     if (!(curStateRB & (1 << 0)))  //Pit
*
0642:  BTFSC  1A.0
0644:  BRA    066A
....................     {
....................         if (recvPowerOn == 0)
0646:  MOVF   24,F
0648:  BNZ   065E
....................         {
....................             PressPowerOn();
064A:  BRA    0636
....................             DELAY_MS(1);  //для настройки STM
064C:  MOVLW  01
064E:  MOVWF  63
0650:  RCALL  025A
....................             do
....................                 curStateRB = INPUT_A();
0652:  SETF   F92
0654:  MOVFF  F80,1A
....................             while (!(curStateRB & (1 << 0)));
0658:  BTFSS  1A.0
065A:  BRA    0652
....................             //отжатие произошло
....................         }
065C:  BRA    0668
....................         else
....................         {
....................             while (transData != 0)
065E:  MOVF   22,F
0660:  BZ    0664
....................             {
0662:  BRA    065E
....................             }
....................             transData = 0x8B;  //№11-наж.
0664:  MOVLW  8B
0666:  MOVWF  22
....................         }
....................         return;
0668:  BRA    069C
....................     }
.................... 
....................     static char bits[] = {3, 6};
....................     static char data[] = {BTN_R_SET, BTN_F5};
.................... 
....................     if (!PressButtons(2, bits, data))
066A:  MOVLW  02
066C:  MOVWF  61
066E:  CLRF   63
0670:  MOVLW  57
0672:  MOVWF  62
0674:  CLRF   65
0676:  MOVLW  59
0678:  MOVWF  64
067A:  RCALL  03B8
067C:  MOVF   01,F
067E:  BNZ   069C
....................     {
....................         RotateGovernor(bit1 && bit2, 0x02, 0x1b);        // УСТАНОВКА
0680:  MOVF   26,F
0682:  BZ    0688
0684:  MOVF   27,F
0686:  BNZ   068C
0688:  MOVLW  00
068A:  BRA    068E
068C:  MOVLW  01
068E:  MOVWF  61
0690:  MOVWF  62
0692:  MOVLW  02
0694:  MOVWF  63
0696:  MOVLW  1B
0698:  MOVWF  64
069A:  RCALL  04F6
....................     }
069C:  RETURN 0
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static char FindStableChange(void)
.................... {
....................     OUTPUT_B(PORTB & 0xc0 | maskSL[sl]);
*
0280:  MOVF   F81,W
0282:  ANDLW  C0
0284:  MOVWF  63
0286:  CLRF   03
0288:  MOVF   21,W
028A:  RCALL  00AE
028C:  IORWF  63,F
028E:  CLRF   F93
0290:  MOVFF  63,F8A
....................     curStateRB = INPUT_A();
0294:  SETF   F92
0296:  MOVFF  F80,1A
.................... 
....................     if (oldStateRB[sl] != curStateRB)
029A:  CLRF   03
029C:  MOVF   21,W
029E:  ADDLW  1B
02A0:  MOVWF  FE9
02A2:  MOVLW  00
02A4:  ADDWFC 03,W
02A6:  MOVWF  FEA
02A8:  MOVF   1A,W
02AA:  SUBWF  FEF,W
02AC:  BZ    0338
....................     {
....................         if ((curStateRB & maskRL[sl]) != maskRL[sl])    // если это кнопка (хотя бы один ненулевой бит из маски стал нулевым), то отрабат. дребезг
02AE:  CLRF   03
02B0:  MOVF   21,W
02B2:  RCALL  00C4
02B4:  MOVWF  01
02B6:  MOVF   1A,W
02B8:  ANDWF  01,W
02BA:  MOVWF  63
02BC:  CLRF   03
02BE:  MOVF   21,W
02C0:  RCALL  00C4
02C2:  MOVWF  01
02C4:  SUBWF  63,W
02C6:  BZ    02FC
....................         {
....................             for (int i = 0; i < 3; i++)
02C8:  CLRF   61
02CA:  MOVF   61,W
02CC:  SUBLW  02
02CE:  BNC   02FA
....................             {
....................                 if (INPUT_A() != curStateRB)
02D0:  SETF   F92
02D2:  MOVF   1A,W
02D4:  SUBWF  F80,W
02D6:  BZ    02F0
....................                 {
....................                     curStateRB = oldStateRB[sl];
02D8:  CLRF   03
02DA:  MOVF   21,W
02DC:  ADDLW  1B
02DE:  MOVWF  FE9
02E0:  MOVLW  00
02E2:  ADDWFC 03,W
02E4:  MOVWF  FEA
02E6:  MOVFF  FEF,1A
....................                     return FALSE;
02EA:  MOVLW  00
02EC:  MOVWF  01
02EE:  BRA    033C
....................                 }
....................                 DELAY_MS(1);
02F0:  MOVLW  01
02F2:  MOVWF  63
02F4:  RCALL  025A
02F6:  INCF   61,F
02F8:  BRA    02CA
....................             }
....................         }
02FA:  BRA    0332
....................         else                                        // а это ручка
....................         {
....................             for (int i = 0; i < 5; i++)
02FC:  CLRF   62
02FE:  MOVF   62,W
0300:  SUBLW  04
0302:  BNC   0332
....................             {
....................                 if (INPUT_A() != curStateRB)
0304:  SETF   F92
0306:  MOVF   1A,W
0308:  SUBWF  F80,W
030A:  BZ    0324
....................                 {
....................                     curStateRB = oldStateRB[sl];
030C:  CLRF   03
030E:  MOVF   21,W
0310:  ADDLW  1B
0312:  MOVWF  FE9
0314:  MOVLW  00
0316:  ADDWFC 03,W
0318:  MOVWF  FEA
031A:  MOVFF  FEF,1A
....................                     return FALSE;
031E:  MOVLW  00
0320:  MOVWF  01
0322:  BRA    033C
....................                 }
....................                 DELAY_US(100);
0324:  MOVLW  42
0326:  MOVWF  00
0328:  DECFSZ 00,F
032A:  BRA    0328
032C:  NOP   
032E:  INCF   62,F
0330:  BRA    02FE
....................             }
....................         }
....................         return TRUE;
0332:  MOVLW  01
0334:  MOVWF  01
0336:  BRA    033C
....................     }
.................... 
....................     return FALSE;
0338:  MOVLW  00
033A:  MOVWF  01
033C:  GOTO   07A0 (RETURN)
.................... }
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... static void InitHardware()
.................... {
....................     DISABLE_INTERRUPTS(GLOBAL);     // общий запрет прерываний
*
020E:  BCF    FF2.6
0210:  BCF    FF2.7
0212:  BTFSC  FF2.7
0214:  BRA    0210
....................     SETUP_OSCILLATOR(OSC_8MHZ);     // |OSC_INTRC
0216:  MOVLW  70
0218:  MOVWF  FD3
021A:  CLRF   F9B
021C:  MOVF   FD3,W
.................... 
....................     SET_TRIS_A(0xff);   // входы
021E:  MOVLW  FF
0220:  MOVWF  F92
....................     SET_TRIS_B(0x00);   // выходы
0222:  MOVLW  00
0224:  MOVWF  F93
....................     SET_TRIS_C(0x10);   // выходы, RC4-вход(данные от STM)
0226:  MOVLW  10
0228:  MOVWF  F94
.................... 
....................     PORTC = 0xcf;
022A:  MOVLW  CF
022C:  MOVWF  F82
....................     PORTB = 0xff;
022E:  SETF   F81
.................... 
....................     PressPowerOff();
0230:  RCALL  0142
.................... 
....................     //Инициализация модуля MSSP(режим SPI)
....................     SSPCON1 = 0x31;
0232:  MOVLW  31
0234:  MOVWF  FC6
....................     SSPSTAT = 0;        // 0x80;
0236:  CLRF   FC7
....................     SSPBUF = 0x55;
0238:  MOVLW  55
023A:  MOVWF  FC9
.................... 
....................     //иниц. таймеров:
....................     //t0con=0xc8;   // 8-ми разр
....................     T0CON = 0x88;   // 16-ми разр счетчик
023C:  MOVLW  88
023E:  MOVWF  FD5
....................     T1CON = 0x85;
0240:  MOVLW  85
0242:  MOVWF  FCD
....................     SETUP_TIMER_1(T1_INTERNAL | T1_DIV_BY_1);
0244:  MOVWF  FCD
.................... 
....................     SET_TIMER1(62286);
0246:  MOVLW  F3
0248:  MOVWF  FCF
024A:  MOVLW  4E
024C:  MOVWF  FCE
024E:  NOP   
....................     //set_timer0(64536); 
.................... 
....................     //enable_interrupts(INT_TIMER2);
....................     ENABLE_INTERRUPTS(INT_TIMER1);
0250:  BSF    F9D.0
....................     //enable_interrupts(INT_TIMER0);
....................     ENABLE_INTERRUPTS(GLOBAL);
0252:  MOVLW  C0
0254:  IORWF  FF2,F
0256:  GOTO   0762 (RETURN)
.................... }
.................... 
.................... #INT_TIMER1 //Приходят каждые 10ms
.................... 
.................... //----------------------------------------------------------------------------------------------------------------------------------------------------
.................... void Prd_kn(void)  //По SPI перед. сост. ПП и прин сообщения от STM
.................... {
....................     while (!(SSPSTAT & 0x01))
*
0156:  BTFSC  FC7.0
0158:  BRA    015C
....................     {
015A:  BRA    0156
....................     }   // ждем  завершения приема
....................     recvData = SSPBUF;               // чтение буфера SPI
015C:  MOVFF  FC9,23
....................     char kod = recvData & 0x7f;
.................... 
....................     static char buttons[4] = {0, sw_K1, sw_K2, sw_Sx};
0160:  MOVF   23,W
0162:  ANDLW  7F
0164:  MOVWF  6C
.................... 
....................     if ((kod > 0) && (kod < 4))         // св.: Kan1,Kan2,Sinchr,
0166:  MOVF   6C,F
0168:  BZ    01DE
016A:  MOVF   6C,W
016C:  SUBLW  03
016E:  BNC   01DE
....................     {
....................         if (recvData & (1 << 7))         // зажигаем или гасим светодиод:
0170:  BTFSS  23.7
0172:  BRA    01A8
....................         {
....................             OUTPUT_LOW(buttons[kod]);   // зажигаем - (0)
0174:  CLRF   03
0176:  MOVF   6C,W
0178:  ADDLW  5B
017A:  MOVWF  FE9
017C:  MOVLW  00
017E:  ADDWFC 03,W
0180:  MOVWF  FEA
0182:  MOVFF  FEF,6D
0186:  MOVFF  6D,6E
018A:  CLRF   6F
018C:  MOVLW  0F
018E:  MOVWF  71
0190:  MOVLW  89
0192:  MOVWF  70
0194:  RCALL  0104
0196:  MOVFF  6D,6E
019A:  CLRF   6F
019C:  MOVLW  0F
019E:  MOVWF  71
01A0:  MOVLW  92
01A2:  MOVWF  70
01A4:  RCALL  0104
....................         }
01A6:  BRA    01DC
....................         else
....................         {
....................             OUTPUT_HIGH(buttons[kod]);  //гасим - (1)
01A8:  CLRF   03
01AA:  MOVF   6C,W
01AC:  ADDLW  5B
01AE:  MOVWF  FE9
01B0:  MOVLW  00
01B2:  ADDWFC 03,W
01B4:  MOVWF  FEA
01B6:  MOVFF  FEF,6D
01BA:  MOVFF  6D,6E
01BE:  MOVLW  01
01C0:  MOVWF  6F
01C2:  MOVLW  0F
01C4:  MOVWF  71
01C6:  MOVLW  89
01C8:  MOVWF  70
01CA:  RCALL  0104
01CC:  MOVFF  6D,6E
01D0:  CLRF   6F
01D2:  MOVLW  0F
01D4:  MOVWF  71
01D6:  MOVLW  92
01D8:  MOVWF  70
01DA:  RCALL  0104
....................         }
....................     }
01DC:  BRA    01EE
....................     else
....................     {
....................         if ((kod == 4) && (recvPowerOn == 1))
01DE:  MOVF   6C,W
01E0:  SUBLW  04
01E2:  BNZ   01EE
01E4:  DECFSZ 24,W
01E6:  BRA    01EE
....................         {
....................             recvPowerOff = 1;
01E8:  MOVLW  01
01EA:  MOVWF  25
....................             PressPowerOff();
01EC:  RCALL  0142
....................         }
....................     }
.................... 
....................     SSPCON1 = SSPCON1 & 0x7f;   //сброс бита конфликта
01EE:  BCF    FC6.7
....................     //Буфер готов к передаче:   
.................... 
....................     OUTPUT_HIGH(PIN_C6);
01F0:  BCF    F94.6
01F2:  BSF    F8B.6
....................     // spi_write(transData); //запись байта в SPI
....................     SSPBUF = transData;
01F4:  MOVFF  22,FC9
....................     transData = 0;
01F8:  CLRF   22
....................     OUTPUT_LOW(PIN_C6);
01FA:  BCF    F94.6
01FC:  BCF    F8B.6
.................... 
....................     SET_TIMER1(45536);  //65536-(0,01/(4/8.000.000))=20000 -- (10ms)  
01FE:  MOVLW  B1
0200:  MOVWF  FCF
0202:  MOVLW  E0
0204:  MOVWF  FCE
0206:  NOP   
0208:  BCF    F9E.0
020A:  GOTO   0060
.................... }

Configuration Fuses:
   Word  1: C800   INTRC_IO FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB
   Word  6: E00F   NOWRT NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
